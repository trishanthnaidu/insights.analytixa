// https://github.com/rootzjs/store v1.1.0 Copyright 2019 Trishanth Naidu
import React, { useEffect, useReducer } from 'react';
/*
* Variable Declarations - Start Here
*/
const appState = { __timeStamp: 0 };
const performanceState = {};

let performanceStart = 0;
let componentStateHandler = {};
let defualtAppState = {};
let eventLogs = [];
let appTracker = {
      targetEvent: [],
      appState: [],
      blockName: []
};
const ERROR = {
      STORE_NAME_ALREADY_EXISTS: name => `Duplicate Store Name: Store Name ${name} already exists, please select another store name`
}
const ENV = {
      development: "development",
      production: "production"
}
/*
* Variable Declarations - Ends Here
*/

/*
* Intrinsic Functions - Start Here
*/
const setImmutableObject = (state, newState) => Object.assign({}, state, newState);
const setAppState = (storeID, newState) => {
      appState[storeID] = setImmutableObject(appState[storeID], newState);
      return appState[storeID];
};
const StoreManager = {
      update: (storeID, newState, mapToState = () => ({})) => {
            const currentState = StoreManager.getState(storeID);
            const updatedState = mapToState(currentState, newState);

            setAppState(storeID, { ...newState, ...updatedState });
            StoreManager.requestUpdate(storeID);
            StoreInsights.setBlockToBeUpdated(storeID);
            StoreInsights.enableStateMonitoring();
            StoreInsights.enableEventMontoring();
      },
      getState: storeID => ({ ...appState[storeID] }),
      getAllState: () => appState,
      setHandlerVariable: (storeID, stateHandlerVariable) => {
            componentStateHandler = setImmutableObject(componentStateHandler, {
                  [storeID]: {
                        type: "function",
                        state: stateHandlerVariable
                  }
            });
      },
      setHandler: (storeID, handler) => {
            componentStateHandler[storeID] = setImmutableObject(componentStateHandler[storeID], {
                  stateHandler: handler
            });
      },
      getProfile: () => defualtAppState,
      setProfile: defaultState => {
            defualtAppState = setImmutableObject(defualtAppState, defaultState);
      },
      requestUpdate: storeID => {
            const requestedBranch = componentStateHandler[storeID];
            const rootzStateHandlerVariable = requestedBranch.state.__rootzStateHandlerVariable;

            requestedBranch.stateHandler({ __rootzStateHandlerVariable: rootzStateHandlerVariable + 1 });
      },
}

const StoreInsights = {
      getPerformanceState: () => performanceState,
      enableMonitoring: (rootId, rootDiv) => {
            StoreInsights.enableStateMonitoring();
            StoreInsights.enableEventMontoring(rootDiv);
            StoreInsights.setBlockToBeUpdated(rootId);
            document.onclick = event => {
                  eventLogs.push(event.target);
                  console.log(appTracker);
                  console.log(StoreInsights.getPerformanceState());
            };
      },
      setBlockToBeUpdated: name => {
            appTracker.blockName.push(name);
      },
      enableBlockMonitoring: () => {
            appTracker.blockName.push(StoreInsights.getPerformanceState());
      },
      enableStateMonitoring: () => {
            appTracker.appState.push(Object.assign({}, StoreManager.getAllState()));
      },
      enableEventMontoring: event => {
            appTracker.targetEvent.push(event);
      },
      getEventLogs: () => eventLogs,
      register: (Component, rootId, environment) => {
            const rootDOM = document.getElementById(rootId);
            const rootBlock = <Component />;

            if (environment === ENV.development) {
                  StoreInsights.enableMonitoring(rootId, rootDOM);

                  return [rootBlock, rootDOM];

            }
      },
      setPerformanceState: storeID => {
            if (Object.keys(performanceState).length === 0) {
                  performanceStart = performance.now();
                  performanceState["_start"] = 0;
                  performanceState[storeID] = [performance.now() - performanceStart];
                  return;
            }
            if (performanceState.hasOwnProperty(storeID)) {
                  performanceState[storeID].push(performance.now() - performanceStart);
            } else {
                  performanceState[storeID] = [performance.now() - performanceStart];
            }
      },
}

/*
* Intrinsic Functions - Ends Here
*/

/*
* Access Functions - Starts Here
*/
const createStore = ({
      storeID,
      Component,
      state,
      mapAllPropsToState = false,
      mapPropsToState = (props, state) => state
}) => {
      if (appState.hasOwnProperty(storeID))
            console.error(ERROR.STORE_NAME_ALREADY_EXISTS(storeID));
      const stateHandlerVariable = { __rootzStateHandlerVariable: 0 };
      let newState = setAppState(storeID, state);

      StoreManager.setHandlerVariable(storeID, stateHandlerVariable);

      const StoreDefinition = {
            [storeID]: props => {
                  const [store, setStorage] = useReducer(
                        (state, newState) => ({ ...state, ...newState }),
                        stateHandlerVariable
                  );
                  const hasStateUpdated = store.__rootzStateHandlerVariable !== 0;
                  const context = StoreManager.getProfile();
                  if (!hasStateUpdated) {
                        newState = mapPropsToState(props, StoreManager.getState(storeID));
                        if (mapAllPropsToState) {
                              newState = setAppState(storeID, { ...newState, ...props });
                        }
                  } else {
                        newState = StoreManager.getState(storeID);
                  }

                  setAppState(storeID, newState);
                  StoreManager.setHandler(storeID, setStorage);
                  useEffect(() => StoreInsights.setPerformanceState(storeID));

                  return <Component
                        props={props}
                        state={newState}
                        hasStateUpdated={hasStateUpdated}
                        profile={context}
                  />
            }
      }

      return StoreDefinition[storeID];
}

export {
      StoreManager,
      StoreInsights,
      createStore,
}
/*
* Access Functions - Ends Here
*/