"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Marker = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function arrowGenerator(color) {
  return {
    '&[x-placement*="bottom"] $arrow': {
      top: 0,
      left: 0,
      marginTop: '-0.95em',
      width: '2em',
      height: '1em'
    },
    '&[x-placement*="top"] $arrow': {
      bottom: 0,
      left: 0,
      marginBottom: '-0.95em',
      width: '2em',
      height: '1em'
    },
    '&[x-placement*="right"] $arrow': {
      left: 0,
      marginLeft: '-0.95em',
      height: '2em',
      width: '1em'
    },
    '&[x-placement*="left"] $arrow': {
      right: 0,
      marginRight: '-0.95em',
      height: '2em',
      width: '1em'
    }
  };
}

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    arrow: {
      position: 'absolute',
      fontSize: 6,
      '&::before': {
        content: '""',
        position: "absolute",
        width: 0,
        height: 0,
        marginLeft: "-1.5em",
        bottom: "-0.9em",
        left: "50%",
        boxSizing: "border-box",
        border: "1em solid white",
        borderColor: "transparent transparent #fff #fff",
        transformOrigin: "0 0",
        transform: "rotate(-45deg)",
        boxShadow: "-3px 3px 3px 0 rgba(0, 0, 0, 0.2)",
        background: "transparent"
      }
    },
    popper: arrowGenerator(theme.palette.common.black),
    tooltip: {
      position: 'relative',
      backgroundColor: theme.background.default,
      maxWidth: 200,
      padding: 12,
      boxShadow: "0 0 7px 0 rgba(0,0,0,0.6)",
      fontFamily: "inherit",
      animation: theme.animation.bounce
    },
    tooltipPlacementLeft: {
      margin: '0 8px'
    },
    tooltipPlacementRight: {
      margin: '0 8px'
    },
    tooltipPlacementTop: {
      margin: '8px 0'
    },
    tooltipPlacementBottom: {
      margin: '8px 0'
    },
    markerContainer: {},
    markerHeader: theme.markers.error.title,
    markerBody: theme.markers.error.body
  };
});

var CustomisedTooltip = function CustomisedTooltip(props) {
  var _useStyles = useStyles(),
      arrow = _useStyles.arrow,
      classes = _objectWithoutProperties(_useStyles, ["arrow"]);

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      arrowRef = _React$useState2[0],
      setArrowRef = _React$useState2[1];

  return _react.default.createElement(_core.Tooltip, _extends({
    classes: classes,
    PopperProps: {
      popperOptions: {
        modifiers: {
          arrow: {
            enabled: Boolean(arrowRef),
            element: arrowRef
          }
        }
      }
    }
  }, props, {
    title: _react.default.createElement(_react.Fragment, null, _react.default.createElement("div", {
      className: classes.markerContainer
    }, _react.default.createElement("div", {
      className: classes.markerHeader
    }, "Terms of Use not Accepted"), _react.default.createElement("p", {
      className: classes.markerBody
    }, "Please accept the Terms of Use to proceed with Login")), _react.default.createElement("span", {
      className: arrow,
      ref: setArrowRef
    }))
  }));
};

var Marker = function Marker(_ref) {
  var title = _ref.title,
      children = _ref.children,
      show = _ref.show;
  return _react.default.createElement(CustomisedTooltip, {
    title: title,
    placement: "top",
    open: show
  }, _react.default.createElement("div", {
    style: {
      display: "inline-block"
    }
  }, children));
};

exports.Marker = Marker;