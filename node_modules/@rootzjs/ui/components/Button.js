"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var _react = _interopRequireDefault(require("react"));

var _button = require("../styles/button");

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Button - Prism Component Library 
 * @param {
 *  variant: string,
 *  color: { Object: theme } // incase of any other than the primary || @default: theme.primary.main
 * } 
 */
var Component = function Component(_ref) {
  var _ref$text = _ref.text,
      text = _ref$text === void 0 ? "Default" : _ref$text,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "contained" : _ref$variant,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "primary" : _ref$color,
      classes = _ref.classes,
      className = _ref.className,
      styles = _ref.styles,
      props = _objectWithoutProperties(_ref, ["text", "variant", "color", "classes", "className", "styles"]);

  return _react.default.createElement(_core.Button, _extends({
    variant: variant,
    color: color,
    className: "".concat(classes.Button, " ").concat(className),
    style: styles
  }, props), text);
};

var Button = (0, _styles.withStyles)(_button.Styles)(Component);
exports.Button = Button;