{"version":3,"sources":["assets/images/somethingWentWrongLight.svg","assets/images/somethingWentWrongDark.svg","styles/AppDrawer.js","components/AppDrawer.jsx","styles/AppHeader.js","components/AppHeader.jsx","styles/Designs/Lines.js","components/Designs/Categorial/Area.jsx","components/Designs/Categorial/Bars.jsx","components/Designs/Statistical/Pie.jsx","components/Designs/Statistical/Donut.jsx","components/Designs/Coordinate/ScatterPlot.jsx","components/Designs/Coordinate/BubblePlot.jsx","components/Designs/Spacial/HeatMaps.jsx","components/Designs/Statistical/Gauge.jsx","components/Designs/Statistical/Radar.jsx","styles/Designs/WorldMap.js","styles/Designs/Dashboard.js","components/Designs/Spacial/WorldMap.jsx","components/Designs/Dashboard/FilterSeletion.jsx","components/Designs/Dashboard/ThemeSelection.jsx","components/Designs/Dashboard/RegionSelection.jsx","components/Designs/Dashboard/TopBottomFilterSelection.jsx","components/Designs/Dashboard/PopulationByCountry.jsx","components/Designs/Dashboard/CountrySelection.jsx","components/Designs/Dashboard/WorldMap.jsx","components/Designs/Dashboard/Master.jsx","styles/Playground.js","components/Playground/index.jsx","styles/Master.js","theme/Master.js","theme/Dark.js","theme/Light.js","theme/Buttons.js","theme/Common.js","theme/Charts.js","theme/App.js","styles/ErrorPage.js","components/ErrorPage/OopsSomethingWentWrong.jsx","components/Master.jsx","components/ErrorPage/Handlers.jsx","service/Mappings.js","service/MockAdapter.js","index.jsx","App.jsx","assets/images/logo.svg","assets/images/logo1.svg"],"names":["module","exports","Styles","makeStyles","theme","root","display","toolbar","mixins","divider","flexShrink","backgroundImage","background","fade","text","dividerMain","backgroundColor","drawerPaper","width","color","border","drawerPaperMobile","icons","minWidth","iconSvg","fontSize","iconRemove","listItem","borderTopRightRadius","borderBottomRightRadius","paddingLeft","activeSection","palette","primary","main","fill","sectionText","listItemLabelButton","cursor","listSubHeader","typography","body1","addIconButton","textTransform","padding","addDynamicName","buttonRemove","logoContainer","alignItems","closeContainer","iconContainer","title","secondary","marginLeft","fontWeight","titleMobileExtraCss","flex","logo","height","logoSectionDrawer","rotateIcon90deg","transform","AppDrawer","createStore","storeID","Component","props","state","route","isMenuOpen","sections","iconSvgMappings","useTheme","styl","onSectionClick","item","StoreManager","update","window","scrollTo","generateSections","Object","keys","map","key","component","push","Divider","className","List","ListSubheader","index","MappedIcons","ListItem","button","onClick","ListItemIcon","ListItemText","onMenuClose","onCloseClick","isMobile","SwipeableDrawer","drawer","classes","paper","open","onOpen","onClose","list","role","IconButton","disabled","src","alt","Typography","variant","CloseRounded","DashboardRounded","Drawer","Insights","Audience","Analysis","ShowChartRounded","BarChartRounded","FilterHdrRounded","ScatterPlotRounded","appBar","zIndex","boxShadow","borderBottom","menuButton","marginRight","spacing","routeTitle","flexGrow","search","position","borderRadius","shape","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","transition","transitions","create","breakpoints","up","themeTogglerFab","minHeight","opacity","themeTogglerDay","btn","reverse","themeTogglerNight","alignSelf","margin","moreApps","hamburger","AppHeader","isLight","onMenuOpen","AppBar","Toolbar","Tooltip","MenuRounded","logoDark","SearchRounded","InputBase","placeholder","input","inputProps","ViewModuleRounded","Switch","checkbox","checked","onChange","evt","target","size","icon","Brightness3Rounded","checkedIcon","Brightness7Rounded","track","checkBoxTrack","marginBottom","paperSimpleLine","marginTop","stroke","paperSimpleBar","paperSimpleArea","paperSimpleTree","paperSimpleHeat","paperSimpleTile","paperContrastLine","paperContrastSpline","paperContrastArea","paperContrastAreaSpline","verticalBarChart","verticalAligned","verticalAlignedFirst","down","paperclusteredBubble","paperPieChart","paperRadarChart","paperWorldMap","lineHeight","borderTopColor","states","outline","strokeWidth","strokeLinecap","grayStates","toggleContainer","HighchartsMore","Highcharts","HighchartsPatternFill","HighchatrsSteamGraph","HighchartsRoundedCorners","HighchartsDumbell","HighchartsLollipop","HighchartBoost","HighchartVariablePie","HighchartHeatMaps","HighchartTileMaps","HighchartsTreeMap","HighchartSolidGauge","colorScaleMono","scaleLinear","domain","range","colorScaleBi","colorScaleHeat","Paper","elevation","data-tip","projection","projectionConfig","rotate","scale","data","length","geography","geographies","geo","d","find","s","ISO3","properties","ISO_A3","id","rsmKey","onMouseEnter","NAME","POP_EST","content","onMouseLeave","style","default","type","hover","worldMapJSON","labels","toggleButtonGroup","boderLeft","borderRight","flexWrap","Æ’ilterContainer","borderTopLeftRadius","transparent","btnFilterBy","countrySelectionContainer","btnCountrySelection","btnYear","popover_Paper","gridContainer","flexDirection","mapContainer","mapFiterContainer","topAndBottomContainer","topSelection","bottomSelection","dataLabels","Filter","Grid","sm","md","ToggleButtonGroup","value","filterBy","exclusive","aria-label","ToggleButton","MonoColorArr","region","paletteContainer","x","paletteColors","GrayColorArr","BiColorArr","HeatColorArr","filterMapping","onFilterSelect","ColorArray","anchor","currentTarget","ExpandMoreRounded","Menu","anchorEl","keepMounted","Boolean","PopoverClasses","MenuItem","VerticalBarChart","categories","chartConfig","chart","inverted","colors","xAxis","visible","opposite","lineWidth","textOutline","textAnchor","reserveSpace","align","y","yAxis","min","legend","enabled","tooltip","formatter","this","num","toFixed","Math","round","plotOptions","series","pointWidth","pointPadding","groupPadding","borderWidth","name","marker","highcharts","options","TopBottomFilter","topRegions","bottomRegions","topRegionsData","bottomRegionsData","appProfile","getProfile","hasOwnProperty","sortedRegions","geoData","sort","a","b","slice","topBottomBy","mapAllPropsToState","PopulationByCountry","filteredMapData","MapData","Name","country","radius","lineColor","tickColor","itemStyle","itemHoverStyle","pointFormat","Country","World","domianMapping","domianMappingBi","domianMappingHeat","Maps","colorScaleGray","getFillData","setProfile","requestUpdate","stylClass","contentText","GDP_MD_EST","rounded","MapsInsights","Dashboard","container","boxSizing","overflowY","ComponentMap","Collabrate","Playground","Section","useEffect","document","getElementById","scrollTop","getState","oopsSomethingWentWrongContianer","DARK_THEME_PROPS","TYPE","TEXT","BACKGROUND","REVERSE","SHADOW","LIGHT_THEME_PROPS","darkThemeStyles","shadow","lightThemeStyles","BUTTONS_PROPS","PRIMARY","SECONDARY","themeCollections","light","dark","commonThemeStyles","selectedTheme","verticalDivider","animation","bounce","bounceFast","swayRTL","swayLTR","eyeBlink","appearBTT","ellipsis","whiteSpace","overflow","textOverflow","fontFamily","h6","test","navigator","userAgent","chartThemeStyles","gridLineWidth","gridLineColor","credits","layout","verticalAlign","symbolHeight","symbolWidth","symbolRadius","symbol","duration","line","column","borderColor","lollipop","connectorWidth","dumbbell","bar","scatter","pie","allowPointSelect","showInLegend","variablepie","solidgauge","linecap","stickyTracking","useHTML","crosshairs","shared","valueDecimals","split","hideDelay","appTheme","forComponent","createMuiTheme","AppTheme","children","ThemeProvider","errorTextTitleContainer","textAlign","btnContainer","btnReload","btnDetails","errorText","OopsSomethingWentWrong","onReload","details","somethingWentWrongLightSVG","somethingWentWrongDarkSVG","console","log","Designs","CssBaseline","didSomethingWentWrong","onReloadPage","errorDetails","Master","onErrorOccured","err","stack","callback","args","onerror","message","file","errorObject","event","errorCharacter","f","callee","caller","errorStack","windowErrorHandler","ENDPOINT_MAPPINGS","ENDPOINT_MOCK_DATA_MAPPINGS","MockAdapter","Axios","onGet","reply","ReactDOM","render"],"mappings":"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","file":"static/js/main.7484161c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/somethingWentWrongLight.29bd231b.svg\";","module.exports = __webpack_public_path__ + \"static/media/somethingWentWrongDark.485713aa.svg\";","import { fade, makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = \"12%\";\nconst drawerWidthMobile = \"50%\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            display: 'flex',\n      },\n      toolbar: theme.mixins.toolbar,\n      divider: {\n            flexShrink: 0,\n            backgroundImage: `linear-gradient(to right, ${theme.background[10]}, ${fade(theme.text[20], 0.12)}, ${theme.background[10]})`\n      },\n      dividerMain: {\n            flexShrink: 0,\n            backgroundColor: theme.text[70]\n      },\n      drawerPaper: {\n            width: drawerWidth,\n            backgroundColor: theme.background[10],\n            color: theme.text[10],\n            border: \"none\",\n      },\n      drawerPaperMobile: {\n            width: drawerWidthMobile,\n            backgroundColor: theme.background[10],\n            color: theme.text[10],\n            border: \"none\",\n      },\n      icons: {\n            color: theme.text[30],\n            minWidth: 32\n      },\n      iconSvg: {\n            fontSize: 20\n      },\n      iconRemove: {\n            fontSize: 11\n      },\n      listItem: {\n            borderTopRightRadius: 20,\n            borderBottomRightRadius: 20,\n            paddingLeft: 20,\n            \"&:hover\": {\n\n            }\n      },\n      activeSection: {\n            backgroundColor: fade(theme.palette.primary.main, 0.075),\n            color: theme.text[10],\n            \"&:hover\": {\n                  backgroundColor: fade(theme.palette.primary.main, 0.075)\n            },\n            \"& svg\": {\n                  fill: theme.palette.primary.main\n            }\n      },\n      sectionText: {\n            color: theme.text[20],\n      },\n      listItemLabelButton: {\n            cursor: \"pointer\",\n            color: theme.palette.primary.main,\n            paddingLeft: 11\n      },\n      listSubHeader: {\n            color: theme.text[50],\n            fontSize: theme.typography.body1.fontSize\n      },\n      addIconButton: {\n            textTransform: \"Capitalize\",\n            color: theme.palette.primary.main,\n            padding: 7\n      },\n      addDynamicName: {\n            fontSize: 14,\n            color: theme.text[10]\n      },\n      buttonRemove: {\n            padding: 5,\n            minWidth: \"auto\"\n      },\n      logoContainer: {\n            display: \"inline-flex\",\n            alignItems: \"center\"\n      },\n      closeContainer: {\n            display: \"inline-flex\",\n            alignItems: \"center\"\n      },\n      iconContainer: {\n            padding: \"10px 0 10px 0\"\n      },\n      title: {\n            display: \"inline-flex\",\n            fontSize: 17,\n            color: theme.palette.secondary.main,\n            marginLeft: 10,\n            fontWeight: 400,\n            alignItems: \"center\"\n      },\n      titleMobileExtraCss:{\n            flex: 1\n      },\n      logo: {\n            height: 20,\n            display: 'inline-flex',\n\n            \"& svg\": {\n                  color: theme.text[50],\n            }\n      },\n      logoSectionDrawer: {\n            display: \"flex\",\n            padding: \"5px 15px\"\n      },\n      rotateIcon90deg:{\n            transform: \"rotate(135deg)\"\n      }\n}));","import React, { useState, Fragment } from 'react';\nimport logo from '../assets/images/logo.svg';\nimport { createStore, StoreManager } from '@rootzjs/store';\nimport {\n      Drawer,\n      List,\n      ListSubheader,\n      ListItem,\n      Divider,\n      ListItemIcon,\n      ListItemText,\n      IconButton,\n      DashboardRounded,\n      useTheme,\n      SwipeableDrawer,\n      Typography,\n      CloseRounded,\n      BlurLinearRounded,\n      AttachMoneyRounded,\n      ShowChartRounded,\n      BarChartRounded,\n      FilterHdrRounded,\n      BubbleChartRounded,\n      ScatterPlotRounded,\n      PieChartRounded,\n      DonutLargeRounded,\n      MapRounded,\n      ViewCompactRounded,\n      WifiTetheringRounded,\n      TimelapseRounded\n} from './Core';\nimport { Styles } from \"../styles/AppDrawer\";\n\nconst Component = ({ props, state }) => {\n      const { route } = props;\n      const { isMenuOpen, sections, iconSvgMappings, activeSection } = state;\n      const theme = useTheme();\n      const styl = Styles();\n      const onSectionClick = item => {\n            StoreManager.update(\"#AppDrawerComponent\", {\n                  isMenuOpen: false,\n                  activeSection: item\n            });\n            StoreManager.update(\"#PlaygroundComponent\", {\n                  activeSection: item\n            });\n            window.scrollTo(0, 0);\n      }\n      const generateSections = () => {\n            const keys = Object.keys(sections[route.title]);\n            return keys.map(key => {\n                  const component = [];\n                  component.push(\n                        <Fragment>\n                              <Divider className={styl.divider} />\n                              <List>\n                                    <ListSubheader component=\"div\" className={styl.listSubHeader}>\n                                          {key}\n                                    </ListSubheader>\n                                    {sections[route.title][key].map((text, index) => {\n                                          const MappedIcons = iconSvgMappings[route.title][text];\n                                          return (\n                                                <ListItem button className={`${styl.listItem} ${activeSection === text && styl.activeSection}`} onClick={() => onSectionClick(text)}>\n                                                      <ListItemIcon className={styl.icons}>\n                                                            <MappedIcons className={styl.iconSvg} />\n                                                      </ListItemIcon>\n                                                      <ListItemText primary={text} className={styl.sectionText} />\n                                                </ListItem>\n                                          )\n                                    })}\n                              </List>\n                        </Fragment>\n                  )\n                  return component;\n            })\n      }\n      const onMenuClose = () => {\n            StoreManager.update(\"#AppDrawerComponent\", {\n                  isMenuOpen: false\n            });\n      }\n      const onMenuOpen = () => {\n            StoreManager.update(\"#AppDrawerComponent\", {\n                  isMenuOpen: true\n            });\n      }\n      const onCloseClick = () => {\n            onMenuClose();\n      }\n      const sideList = side => (\n            <div\n                  className={styl.list}\n                  role=\"presentation\"\n            >\n                  <div className={styl.logoSectionDrawer}>\n                        <div className={styl.logoContainer}>\n                              <IconButton className={styl.iconContainer} disabled>\n                                    <img className={styl.logo} src={logo} alt=\"logo\" />\n                              </IconButton>\n                        </div>\n                        <Typography className={`${styl.title} ${styl.titleMobileExtraCss}`} variant=\"h6\" color=\"inherit\">\n                              Analytixa\n                        </Typography>\n                        <div className={styl.closeContainer}>\n                              <IconButton className={styl.iconContainer}>\n                                    <CloseRounded onClick={onCloseClick} />\n                              </IconButton>\n                        </div>\n                  </div>\n                  <Divider className={styl.dividerMain} />\n                  <List>\n                        <ListItem button className={`${styl.listItem} ${activeSection === \"Collabrate\" && styl.activeSection}`} onClick={() => onSectionClick(\"Collabrate\")}>\n                              <ListItemIcon className={styl.icons}>\n                                    <DashboardRounded />\n                              </ListItemIcon>\n                              <ListItemText primary=\"Collabrate\" className={styl.sectionText} />\n                        </ListItem>\n                  </List>\n                  {generateSections()}\n            </div>\n      )\n      return (\n            <div className={styl.root}>\n                  {\n                        theme.isMobile ?\n                              <SwipeableDrawer\n                                    className={styl.drawer}\n                                    classes={{ paper: styl.drawerPaperMobile }}\n                                    open={isMenuOpen}\n                                    onOpen={onMenuOpen}\n                                    onClose={onMenuClose}\n                              >\n                                    {sideList('left')}\n                              </SwipeableDrawer>\n                              :\n                              <Drawer\n                                    className={styl.drawer}\n                                    variant=\"permanent\"\n                                    classes={{ paper: styl.drawerPaper }}\n                              >\n\n                                    <div className={styl.toolbar} />\n                                    <List>\n                                          <ListItem button className={`${styl.listItem} ${activeSection === \"Collabrate\" && styl.activeSection}`} onClick={onSectionClick}>\n                                                <ListItemIcon className={styl.icons}>\n                                                      <DashboardRounded />\n                                                </ListItemIcon>\n                                                <ListItemText primary=\"Collabrate\" className={styl.sectionText} />\n                                          </ListItem>\n                                    </List>\n                                    {generateSections()}\n                              </Drawer>\n                  }\n            </div>\n      );\n}\n\nexport const AppDrawer =\n      createStore({\n            storeID: \"#AppDrawerComponent\",\n            Component: Component,\n            state: {\n                  isMenuOpen: false,\n                  activeSection: \"Collabrate\",\n                  sections: {\n                        Insights: {\n                              Audience: ['Demographics', 'Geo'],\n                              Analysis: ['Predictive', 'Performance'],\n                        }\n                  },\n                  iconSvgMappings: {\n                        Insights: {\n                              \"Demographics\": ShowChartRounded,\n                              \"Geo\": BarChartRounded,\n                              \"Predictive\": FilterHdrRounded,\n                              \"Performance\": ScatterPlotRounded,\n                        },\n                  }\n            }\n      });","import { fade, makeStyles } from '@material-ui/core/styles';\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            display: \"flex\",\n            flex: theme.isMobile ? 0 : 1\n      },\n      appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            boxShadow: \"none\",\n            backgroundColor: theme.background[\"00\"],\n            borderBottom: `solid 1px ${theme.text[70]}`,\n      },\n      menuButton: {\n            marginRight: theme.spacing(0.5),\n      },\n      title: {\n            fontSize: 17,\n            color: theme.palette.secondary.main,\n            marginRight: 10,\n            marginLeft: 10,\n            fontWeight: 400,\n      },\n      routeTitle: {\n            color: theme.text[30],\n            flexGrow: 1,\n            fontWeight: 400,\n            marginLeft: 10,\n            fontSize: 17,\n      },\n      logoContainer: {\n      },\n      iconContainer: {\n            padding: \"10px 0 10px 0\"\n      },\n      logo: {\n            height: 22,\n            display: 'inline-flex',\n\n            \"& svg\": {\n                  color: theme.text[50],\n            }\n      },\n      search: {\n            position: 'relative',\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: theme.background[10],\n            marginRight: 10,\n            width: 'auto',\n            '&:hover': {\n                  backgroundColor: theme.background[20],\n            },\n      },\n      searchIcon: {\n            width: theme.spacing(7),\n            height: '100%',\n            position: 'absolute',\n            pointerEvents: 'none',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            color: theme.text[30],\n            \"& svg\": {\n                  fontSize: 18\n            },\n      },\n      inputRoot: {\n            color: theme.text[\"00\"],\n      },\n      inputInput: {\n            fontSize: 13,\n            padding: theme.spacing(1, 1, 1, 7),\n            transition: theme.transitions.create('width'),\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                  width: 120,\n                  '&:focus': {\n                        width: 200,\n                  },\n            },\n      },\n      themeTogglerFab: {\n            width: 25,\n            height: 25,\n            minHeight: 25,\n            opacity: 0.1,\n      },\n      themeTogglerDay: {\n            ...theme.btn.primary,\n            padding: 2,\n            color: theme.background[\"00\"],\n            backgroundColor: theme.reverse.background[\"00\"],\n            borderRadius: 15,\n            fontSize: 16,\n            transform: \"rotate(120deg)\"\n      },\n      themeTogglerNight: {\n            ...theme.btn.primary,\n            padding: 2,\n            color: theme.reverse.background[\"00\"],\n            backgroundColor: theme.palette.primary.main,\n            borderRadius: 15,\n            fontSize: 16,\n            transform: \"rotate(120deg)\"\n      },\n      divider: {\n            alignSelf: 'stretch',\n            height: 'auto',\n            margin: theme.spacing(1, 0.5),\n            backgroundColor: theme.text[70]\n      },\n      moreApps: {\n            color: theme.reverse.background[20],\n            padding: 7,\n            margin: 5\n      },\n      hamburger: {\n            color: theme.reverse.background[20],\n            padding: 7,\n      }\n}));","import React, { Fragment } from 'react';\nimport logo from '../assets/images/logo.svg';\nimport logoDark from '../assets/images/logo1.svg';\nimport { AppDrawer } from './AppDrawer';\nimport { StoreManager } from '@rootzjs/store';\nimport {\n      Switch,\n      Brightness3Rounded,\n      Brightness7Rounded,\n      useTheme,\n      SearchRounded,\n      TrackChangesRounded,\n      InputBase,\n      Typography,\n      IconButton,\n      Toolbar,\n      AppBar,\n      Tooltip,\n      Icon,\n      Divider,\n      ViewModuleRounded,\n      MenuOpenRounded,\n      MenuRounded\n} from './Core';\n\nimport { Styles } from \"../styles/AppHeader\";\n\nexport const AppHeader = ({ route }) => {\n      const styl = Styles();\n      const theme = useTheme();\n      const isLight = theme.theme === \"light\";\n      const onThemeChange = evt => {\n            StoreManager.update(\"#MasterComponent\", { theme: evt.target.checked ? \"dark\" : \"light\" });\n      }\n      const onMenuOpen = () => {\n            StoreManager.update(\"#AppDrawerComponent\", {\n                  isMenuOpen: true\n            });\n      }\n      const MobileToolbar = () =>\n            <div className={styl.logoContainer}>\n                  <Tooltip title={`open filter section`} >\n                        <IconButton component=\"span\" className={styl.hamburger}>\n                              <MenuRounded onClick={onMenuOpen} />\n                        </IconButton>\n                  </Tooltip>\n            </div>\n      const DesktopToolbar = () =>\n            <Fragment>\n                  <div className={styl.logoContainer}>\n                        <IconButton className={styl.iconContainer} disabled>\n                              <img className={styl.logo} src={isLight ? logo : logoDark} alt=\"logo\" />\n                        </IconButton>\n                  </div>\n                  {/* <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Analytixa\n                  </Typography>\n                  <Divider className={styl.divider} orientation=\"vertical\" /> */}\n            </Fragment>\n\n      return (\n            <div className={styl.root}>\n                  <AppBar position=\"fixed\" className={styl.appBar}>\n                        <Toolbar variant=\"dense\">\n                              {\n                                    theme.isMobile ?\n                                          <MobileToolbar />\n                                          :\n                                          <DesktopToolbar />\n                              }\n                              <Typography className={styl.routeTitle} variant=\"h6\" color=\"inherit\">\n                                    {route.title}\n                              </Typography>\n                              {\n                                    theme.isMobile ||\n                                    <div className={styl.search}>\n                                          <div className={styl.searchIcon}>\n                                                <SearchRounded />\n                                          </div>\n                                          <InputBase\n                                                placeholder=\"Searchâ€¦\"\n                                                classes={{\n                                                      root: styl.inputRoot,\n                                                      input: styl.inputInput,\n                                                }}\n                                                inputProps={{ 'aria-label': 'search' }}\n                                          />\n                                    </div>\n                              }\n                              <Tooltip title={`More Apps`} >\n                                    <IconButton component=\"span\" className={styl.moreApps}>\n                                          <ViewModuleRounded />\n                                    </IconButton>\n                              </Tooltip>\n                              <Tooltip title={`toggle to ${theme.theme === \"light\" ? \"dark\" : \"light\"} theme`} >\n                                    <Switch\n                                          className={styl.checkbox}\n                                          checked={!isLight}\n                                          onChange={onThemeChange}\n                                          color=\"primary\"\n                                          size=\"small\"\n                                          icon={<Brightness3Rounded className={styl.themeTogglerDay} />}\n                                          checkedIcon={<Brightness7Rounded className={styl.themeTogglerNight} />}\n                                          classes={{\n                                                track: styl.checkBoxTrack\n                                          }}\n                                    />\n                              </Tooltip>\n                        </Toolbar>\n                  </AppBar>\n            </div>\n      );\n}\n","import { makeStyles, fade } from \"@material-ui/core/styles\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            marginBottom: 80,\n      },\n      title: {\n            padding: \"10px 5px\",\n            color: theme.text[20],\n            fontWeight: 400,\n            fontSize: 18\n      },\n      paperSimpleLine: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      paperSimpleBar: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: theme.isMobile ? 0 : -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      paperSimpleArea: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: theme.isMobile ? 0 : -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      paperSimpleTree: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: theme.isMobile ? 350 : 500,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: theme.isMobile ? -20 : -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: theme.text[\"00\"],\n            }\n      },\n      paperSimpleHeat: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 500,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: theme.text[\"00\"],\n            }\n      },\n      paperSimpleTile: {\n            width: theme.isMobile ? \"92vw\" : \"50vw\",\n            height: theme.isMobile ? 275 : 500,\n            padding: 7,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: theme.text[\"00\"],\n            }\n      },\n      paperContrastLine: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: fade(theme.palette.primary.main, 0.7),\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10,\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg .highcharts-grid-line\": {\n                  stroke: \"transparent\"\n            },\n      },\n      paperContrastSpline: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: fade(\"#368bf4\", 0.9),\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10,\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg .highcharts-grid-line\": {\n                  stroke: \"transparent\"\n            },\n      },\n      paperContrastArea: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: fade(\"#009694\", 0.75),\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10,\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg .highcharts-grid-line\": {\n                  stroke: \"transparent\"\n            },\n      },\n      paperContrastAreaSpline: {\n            height: 300,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: fade(theme.palette.primary.main, 0.75),\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10,\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg .highcharts-grid-line\": {\n                  stroke: \"transparent\"\n            },\n      },\n      verticalBarChart: {\n            width: theme.isMobile ? \"92vw\" : \"35vw\",\n            height: theme.isMobile ? 500 : 600,\n            padding: 10,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: theme.isMobile ? 0 : -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      verticalAligned: {\n            display: \"inline-block\"\n      },\n      verticalAlignedFirst: {\n            marginRight: 72,\n\n            [theme.breakpoints.down('md')]: {\n                  marginRight: 50\n            },\n\n            [theme.breakpoints.down('sm')]: {\n                  marginRight: 33,\n            }\n      },\n      paperclusteredBubble: {\n            width: theme.isMobile ? \"92vw\" : \"35vw\",\n            height: theme.isMobile ? 350 : 500,\n            padding: 15,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      paperPieChart: {\n            width: theme.isMobile ? \"92vw\" : \"35vw\",\n            height: theme.isMobile ? 375 : 500,\n            padding: 15,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      paperRadarChart: {\n            width: theme.isMobile ? \"92vw\" : \"35vw\",\n            height: theme.isMobile ? 375 : 500,\n            padding: 15,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            },\n\n            \"& div.highcharts-container svg path.highcharts-grid-line\": {\n                  stroke: fade(theme.text[40], 0.1),\n            },\n\n            \"& div.highcharts-container svg path.highcharts-axis-line\": {\n                  stroke: fade(theme.text[40], 0.15),\n            }\n      },\n      paperWorldMap: {\n            width: theme.isMobile ? \"92vw\" : \"75vw\",\n            height: theme.isMobile ? 375 : 550,\n            padding: 15,\n            borderRadius: 5,\n            backgroundColor: theme.background[\"00\"],\n\n            \"& svg\": {\n                  transform: \"translateY(15px)\"\n            },\n\n            \"& .__react_component_tooltip\": {\n                  color: \"#FFF\",\n                  padding: \"4px 8px\",\n                  fontSize: \"11px\",\n                  lineHeight: \"1.4em\",\n                  borderRadius: 5,\n                  backgroundColor: theme.palette.primary.main\n            },\n            \"& .__react_component_tooltip.type-dark.place-top:after\": {\n                  borderTopColor: \"#f44335\"\n            }\n      },\n      states: {\n            outline: \"none\",\n            zIndex: 1,\n            cursor: \"pointer\",\n            transition: \"fill 0.3s ease\",\n            strokeWidth: 1,\n            strokeLinecap: \"round\",\n            stroke: fade(theme.reverse.background[10], 0.25)\n      },\n      grayStates: {\n            outline: \"none\",\n            zIndex: 1,\n            cursor: \"pointer\",\n            transition: \"fill 0.3s ease\",\n            strokeWidth: 1,\n            strokeLinecap: \"round\",\n            fill: fade(theme.background[30], 0.3)\n      },\n      toggleContainer: {\n\n      }\n}))","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchatrsSteamGraph from 'highcharts/modules/streamgraph';\nimport HighchartsPatternFill from 'highcharts/modules/pattern-fill';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartsMore(Highcharts);\nHighchartsPatternFill(Highcharts);\nHighchatrsSteamGraph(Highcharts)\n\nexport const Area = () => (\n      <Fragment>\n            <SimpleChart />\n            <SimpleAreaWithLineChart />\n            <ContrastAreaChart />\n            <AreaWithGradientChart />\n            <MultipleAreaChart />\n            <ZonedAreaChart />\n            <SteamChart />\n            <RangeAreaChart />\n            <SimpleAreaWithSplineChart />\n            <ContrastAreaWithSplineChart />\n            <PatternAreaChart />\n            <PatternAreaWithGradientChart />\n            <MultipleAreaChartSpline />\n            <ZonedSplineAreaChart />\n            <RangeAreaSplineChart />\n      </Fragment>\n\n)\n\nconst SimpleChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Area Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleAreaWithLineChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: theme.chartConfig.colors[2],\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Line Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleAreaWithSplineChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[0]],\n                                    [1, fade(theme.chartConfig.colors[0], 0.3)]\n                              ]\n                        },\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4],\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[1]],\n                                    [1, fade(theme.chartConfig.colors[1], 0.3)]\n                              ]\n                        },\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Spline Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst AreaWithGradientChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  area: {\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[3]],\n                                    [1, fade(theme.chartConfig.colors[3], 0.3)]\n                              ]\n                        },\n                  }\n            },\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: theme.chartConfig.colors[5],\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Gradient Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MultipleAreaChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[0]],\n                                    [1, fade(theme.chartConfig.colors[0], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[1]],\n                                    [1, fade(theme.chartConfig.colors[1], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[2]],\n                                    [1, fade(theme.chartConfig.colors[2], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Multi-Line Area Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MultipleAreaChartSpline = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        fillOpacity: 0.3,\n                        color: theme.chartConfig.colors[3],\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[3]],\n                                    [1, fade(theme.chartConfig.colors[3], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4],\n                        fillOpacity: 0.3,\n                        color: theme.chartConfig.colors[4],\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[4]],\n                                    [1, fade(theme.chartConfig.colors[4], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9],\n                        fillOpacity: 0.3,\n                        color: theme.chartConfig.colors[2],\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[2]],\n                                    [1, fade(theme.chartConfig.colors[2], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Multi-Spline Area Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst ContrastAreaChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            colors: [\"#FFFFFF80\", \"#FFFFFF\"],\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        marker: {\n                              ...theme.chartConfig.plotOptions.series.marker,\n                              lineWidth: 0,\n                              radius: 5\n                        },\n                  }\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.xAxis,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            yAxis: {\n                  ...theme.chartConfig.yAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.yAxis.labels,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  itemStyle: {\n                        fontWeight: 400,\n                        color: \"#FFFFFFE0\",\n                  },\n                  itemHoverStyle: {\n                        color: \"#FFFFFF\",\n                  },\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4]\n                  },\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  backgroundColor: \"#FFFFFFA0\",\n                  pointFormat: '<span style=\"color: #FFFFFFE0>{series.name}</span>: <b>{point.y}</b>{point.change}<br/>',\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Contrast Area Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperContrastArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst ContrastAreaWithSplineChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            colors: [\"#FFFFFF80\", \"#FFFFFF\"],\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        marker: {\n                              ...theme.chartConfig.plotOptions.series.marker,\n                              lineWidth: 0,\n                              radius: 5\n                        },\n                  }\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.xAxis,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            yAxis: {\n                  ...theme.chartConfig.yAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.yAxis.labels,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  itemStyle: {\n                        fontWeight: 400,\n                        color: \"#FFFFFFE0\",\n                  },\n                  itemHoverStyle: {\n                        color: \"#FFFFFF\",\n                  },\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4],\n                        marker: {\n                              enabled: false\n                        }\n                  },\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  backgroundColor: \"#FFFFFFA0\",\n                  pointFormat: '<span style=\"color: #FFFFFFE0>{series.name}</span>: <b>{point.y}</b>{point.change}<br/>',\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Contrast Area Spline Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperContrastAreaSpline}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst ZonedAreaChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  area: {\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[0]],\n                                    [1, fade(theme.chartConfig.colors[0], 0.3)]\n                              ]\n                        },\n                  }\n            },\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        zoneAxis: 'x',\n                        zones: [{\n                              value: 3,\n                              dashStyle: 'solid',\n                              color: theme.chartConfig.colors[1],\n                              fillColor: {\n                                    linearGradient: {\n                                          x1: 0,\n                                          y1: 0,\n                                          x2: 0,\n                                          y2: 1\n                                    },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[1]],\n                                          [1, fade(theme.chartConfig.colors[1], 0.3)]\n                                    ]\n                              },\n                        }, {\n                              value: 8,\n                              dashStyle: 'dot',\n                              color: theme.chartConfig.colors[2],\n                              fillColor: {\n                                    linearGradient: {\n                                          x1: 0,\n                                          y1: 0,\n                                          x2: 0,\n                                          y2: 1\n                                    },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[2]],\n                                          [1, fade(theme.chartConfig.colors[2], 0.3)]\n                                    ]\n                              },\n                        },]\n                  }\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  borderColor: \"#888\"\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Zone Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst ZonedSplineAreaChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  area: {\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[0]],\n                                    [1, fade(theme.chartConfig.colors[0], 0.3)]\n                              ]\n                        },\n                  }\n            },\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        zoneAxis: 'x',\n                        zones: [{\n                              value: 3,\n                              dashStyle: 'solid',\n                              color: theme.chartConfig.colors[1],\n                              fillColor: {\n                                    linearGradient: {\n                                          x1: 0,\n                                          y1: 0,\n                                          x2: 0,\n                                          y2: 1\n                                    },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[1]],\n                                          [1, fade(theme.chartConfig.colors[1], 0.3)]\n                                    ]\n                              },\n                        }, {\n                              value: 8,\n                              dashStyle: 'dot',\n                              color: theme.chartConfig.colors[2],\n                              fillColor: {\n                                    linearGradient: {\n                                          x1: 0,\n                                          y1: 0,\n                                          x2: 0,\n                                          y2: 1\n                                    },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[2]],\n                                          [1, fade(theme.chartConfig.colors[2], 0.3)]\n                                    ]\n                              },\n                        },]\n                  }\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  borderColor: \"#888\"\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Spline Zone Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst RangeAreaChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'area'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  crosshairs: true,\n                  shared: true,\n                  borderColor: \"#888\"\n            },\n            series: [\n                  {\n                        name: \"Analytixa - Min Range\",\n                        data: [[450, 620], [112, 190], [240, 480], [202, 390], [120, 370], [129, 329], [219, 430], [120, 299], [196, 289], [370, 599], [129, 276], [307, 467]],\n                        type: 'arearange',\n                        zIndex: 1,\n                        fillOpacity: 0.5,\n                        tooltip: {\n                              ...theme.chartConfig.tooltip,\n                              valueDecimals: 0,\n                              pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>',\n                        }\n                  },\n                  {\n                        name: 'Analytixa - Max Range',\n                        data: [[350, 620], [12, 290], [140, 580], [102, 490], [20, 470], [29, 329], [119, 530], [20, 399], [96, 389], [230, 699], [129, 376], [207, 567]],\n                        type: 'arearange',\n                        lineWidth: 0,\n                        fillOpacity: 0.5,\n                        zIndex: 0,\n                        marker: {\n                              enabled: false\n                        },\n                        tooltip: {\n                              ...theme.chartConfig.tooltip,\n                              valueDecimals: 0,\n                              pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>',\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Range Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst RangeAreaSplineChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  crosshairs: true,\n                  shared: true,\n                  borderColor: \"#888\"\n            },\n            series: [\n                  {\n                        name: \"Analytixa - Min Range\",\n                        data: [[450, 620], [112, 190], [240, 480], [202, 390], [120, 370], [129, 329], [219, 430], [120, 299], [196, 289], [370, 599], [129, 276], [307, 467]],\n                        type: 'areasplinerange',\n                        zIndex: 1,\n                        fillOpacity: 0.5,\n                        tooltip: {\n                              ...theme.chartConfig.tooltip,\n                              valueDecimals: 0,\n                              pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>',\n                        }\n                  },\n                  {\n                        name: 'Analytixa - Max Range',\n                        data: [[350, 620], [12, 290], [140, 580], [102, 490], [20, 470], [29, 329], [119, 530], [20, 399], [96, 389], [230, 699], [129, 376], [207, 567]],\n                        type: 'areasplinerange',\n                        lineWidth: 0,\n                        fillOpacity: 0.5,\n                        zIndex: 0,\n                        marker: {\n                              enabled: false\n                        },\n                        tooltip: {\n                              ...theme.chartConfig.tooltip,\n                              valueDecimals: 0,\n                              pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>',\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Area Spline Range Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst PatternAreaChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            defs: {\n                  patterns: [{\n                        'id': 'custom-pattern-0',\n                        'path': {\n                              d: 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',\n                              stroke: theme.chartConfig.colors[0],\n                              strokeWidth: 3,\n                        }\n                  }, {\n                        'id': 'custom-pattern-1',\n                        'path': {\n                              d: 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',\n                              stroke: theme.chartConfig.colors[1],\n                              strokeWidth: 3,\n                        }\n                  }]\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: theme.chartConfig.colors[0],\n                        fillColor: 'url(#custom-pattern-0)'\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4],\n                        color: theme.chartConfig.colors[1],\n                        fillColor: 'url(#custom-pattern-1)'\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Patterned Area Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst PatternAreaWithGradientChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            defs: {\n                  patterns: [{\n                        'id': 'custom-pattern0',\n                        'path': {\n                              d: 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',\n                              stroke: theme.chartConfig.colors[2],\n                              strokeWidth: 3,\n                              fill: {\n                                    linearGradient: {\n                                          x1: 0,\n                                          y1: 0,\n                                          x2: 0,\n                                          y2: 1\n                                    },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[2]],\n                                          [1, fade(theme.chartConfig.colors[2], 0.3)]\n                                    ]\n                              },\n                              marker: {\n                                    enabled: false\n                              },\n                        }\n                  }, {\n                        'id': 'custom-pattern1',\n                        'path': {\n                              d: 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',\n                              stroke: theme.chartConfig.colors[4],\n                              strokeWidth: 3,\n                              fill: {\n                                    linearGradient: {\n                                          x1: 0,\n                                          y1: 0,\n                                          x2: 0,\n                                          y2: 1\n                                    },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[4]],\n                                          [1, fade(theme.chartConfig.colors[4], 0.3)]\n                                    ]\n                              },\n                        }\n                  }]\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        fillColor: 'url(#custom-pattern0)',\n                        color: theme.chartConfig.colors[2],\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4],\n                        fillColor: 'url(#custom-pattern1)',\n                        color: theme.chartConfig.colors[4],\n                        marker: {\n                              enabled: false\n                        },\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Patterned Gradient Area Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SteamChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'streamgraph',\n                  marginBottom: 30,\n                  zoomType: 'x'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  type: 'category',\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [\n                              0, 3, 4, 2, 4, 0, 0, 8, 8, 11, 6, 12, 11, 5, 6, 7, 1, 10, 21, 9, 17, 17, 23, 16, 70\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[0]],\n                                    [1, fade(theme.chartConfig.colors[0], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Google\",\n                        data: [\n                              0, 2, 5, 3, 7, 0, 0, 10, 4, 10, 7, 7, 8, 4, 2, 4, 8, 6, 4, 3, 3, 7, 14, 11, 15\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[1]],\n                                    [1, fade(theme.chartConfig.colors[1], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [\n                              0, 17, 15, 10, 15, 0, 0, 10, 16, 4, 6, 15, 14, 12, 7, 10, 9, 5, 20, 26, 25, 25, 19, 23, 36\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[2]],\n                                    [1, fade(theme.chartConfig.colors[2], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Apple\",\n                        data: [\n                              0, 4, 6, 12, 4, 0, 0, 9, 11, 7, 10, 7, 7, 8, 10, 12, 8, 6, 11, 13, 13, 34, 25, 37, 28\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[3]],\n                                    [1, fade(theme.chartConfig.colors[3], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Adobe\",\n                        data: [\n                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 14, 19, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[4]],\n                                    [1, fade(theme.chartConfig.colors[4], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Disney\",\n                        data: [\n                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 10, 5, 4, 8, 0, 0, 0, 0, 0, 0, 0\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[5]],\n                                    [1, fade(theme.chartConfig.colors[5], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Facebook\",\n                        data: [\n                              0, 0, 1, 2, 6, 0, 0, 0, 7, 2, 8, 9, 0, 0, 0, 0, 0, 0, 26, 24, 29, 36, 29, 30, 19\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[6]],\n                                    [1, fade(theme.chartConfig.colors[6], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Alphabet\",\n                        data: [\n                              0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 25, 13, 16, 27, 22, 25, 29, 0, 0, 0, 0, 0, 0, -1\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[7]],\n                                    [1, fade(theme.chartConfig.colors[7], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  },\n                  {\n                        name: \"Microsoft\",\n                        data: [\n                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, -4\n                        ],\n                        fillOpacity: 0.3,\n                        fillColor: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[8]],\n                                    [1, fade(theme.chartConfig.colors[8], 0.3)]\n                              ]\n                        },\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Steam Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleArea}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchartsLollipop from 'highcharts/modules/lollipop';\nimport HighchartsDumbell from 'highcharts/modules/dumbbell';\nimport HighchartsRoundedCorners from 'yarn-highcharts-rounded-corners';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartsRoundedCorners(Highcharts);\nHighchartsMore(Highcharts);\nHighchartsDumbell(Highcharts);\nHighchartsLollipop(Highcharts);\n\nexport const Bars = () => (\n      <Fragment>\n            <SimpleBarChart />\n            <GradientBarChart />\n            <MultipleBarChart />\n            <StackedBarChart />\n            <VerticalBarChart />\n            <VerticalGroupedBarChart />\n            <VerticalStackedBarChart />\n            <PyramidBarChart />\n            <SimpleLipstickChart />\n            <GradientLipstickChart />\n            <PyramidLipstickChart />\n            <PyramidLollipopChart />\n            <SimpleLollipopChart />\n            <SimpleCableBrideChart />\n            <SimpleDumbellChart />\n            <ContrastBarChart />\n            <ZonedBarChart />\n            <RangeBarChart />\n      </Fragment>\n)\n\nconst SimpleBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst GradientBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[3]],\n                                    [1, fade(theme.chartConfig.colors[3], 0.3)]\n                              ]\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Gradient Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleLollipopChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"lollipop\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  pointWidth: 50,\n                  series: {\n                        marker: {\n                              symbol: \"circle\",\n                              lineWidth: 5,\n                              radius: 15\n                        }\n                  }\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 60, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: \"#f33535\"\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Lollipop Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleCableBrideChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"lollipop\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  pointWidth: 50,\n                  series: {\n                        marker: {\n                              symbol: \"circle\",\n                              lineWidth: 5,\n                              radius: 15\n                        }\n                  }\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 60, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: fade(theme.chartConfig.colors[1], 0.3)\n                  },\n                  {\n                        name: \"Connectors\",\n                        type: \"line\",\n                        data: [579, 60, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: theme.chartConfig.colors[1],\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Cable-Stayed Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleLipstickChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  column: {\n                        ...theme.chartConfig.plotOptions.column,\n                        borderRadiusTopLeft: \"50%\",\n                        borderRadiusTopRight: \"50%\"\n                  }\n            },\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: theme.chartConfig.colors[1],\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Lipstick Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst GradientLipstickChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  column: {\n                        ...theme.chartConfig.plotOptions.column,\n                        borderRadiusTopLeft: \"50%\",\n                        borderRadiusTopRight: \"50%\"\n                  }\n            },\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        color: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[4]],\n                                    [1, fade(theme.chartConfig.colors[4], 0.3)]\n                              ]\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Gradient Lipstick Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst ContrastBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            colors: [\"#FFFFFF\", \"#FFFFFF80\"],\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        marker: {\n                              ...theme.chartConfig.plotOptions.series.marker,\n                              lineWidth: 0,\n                              radius: 5\n                        },\n                  }\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.xAxis,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            yAxis: {\n                  ...theme.chartConfig.yAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.yAxis.labels,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  itemStyle: {\n                        fontWeight: 400,\n                        color: \"#FFFFFFE0\",\n                  },\n                  itemHoverStyle: {\n                        color: \"#FFFFFF\",\n                  },\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532]\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4]\n                  },\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  backgroundColor: \"#FFFFFFA0\",\n                  pointFormat: '<span style=\"color: #FFFFFFE0>{series.name}</span>: <b>{point.y}</b>{point.change}<br/>',\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Contrast Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperContrastSpline}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst ZonedBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        zoneAxis: 'x',\n                        zones: [{\n                              value: 3,\n                              dashStyle: 'solid',\n                              color: theme.chartConfig.colors[1],\n                              fillColor: theme.chartConfig.colors[1]\n                        }, {\n                              value: 8,\n                              dashStyle: 'dot',\n                              color: theme.chartConfig.colors[2],\n                              fillColor: theme.chartConfig.colors[3]\n                        },]\n                  }\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  borderColor: \"#888\"\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Bar Zone Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst RangeBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  crosshairs: true,\n                  shared: true,\n                  borderColor: \"#888\"\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                        zIndex: 1,\n                  },\n                  {\n                        name: 'Range',\n                        data: [[450, 620], [12, 190], [140, 480], [102, 490], [120, 470], [129, 329], [219, 530], [20, 299], [196, 489], [430, 699], [129, 376], [307, 667]],\n                        type: 'arearange',\n                        lineWidth: 0,\n                        fillOpacity: 0.3,\n                        zIndex: 0,\n                        marker: {\n                              enabled: false\n                        },\n                        tooltip: {\n                              ...theme.chartConfig.tooltip,\n                              valueDecimals: 0,\n                              pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.low}</b> - <b>{point.high}</b><br/>',\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Bar Range Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleDumbellChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"dumbbell\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  pointWidth: 50,\n                  series: {\n                        marker: {\n                              symbol: \"circle\",\n                              lineWidth: 5,\n                              radius: 12,\n                        },\n                        lowColor: \"#9E9E9E\"\n                  },\n            },\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  shared: true,\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [{\n                              low: 69,\n                              high: 82\n                        }, {\n                              low: 70,\n                              high: 81\n                        }, {\n                              low: 69,\n                              high: 75\n                        }, {\n                              low: 65,\n                              high: 78\n                        }, {\n                              low: 70,\n                              high: 81\n                        }, {\n                              low: 70,\n                              high: 79\n                        }, {\n                              low: 72,\n                              high: 81\n                        }, {\n                              low: 68,\n                              high: 78\n                        }, {\n                              low: 69,\n                              high: 81\n                        }, {\n                              low: 70,\n                              high: 83\n                        }, {\n                              low: 68,\n                              high: 81\n                        }, {\n                              low: 69,\n                              high: 83\n                        }],\n                        color: theme.chartConfig.colors[3],\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Dumbbell Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MultipleBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532]\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4]\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9]\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Grouped Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst StackedBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"column\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  column: {\n                        ...theme.chartConfig.plotOptions.column,\n                        stacking: 'normal',\n                  }\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532]\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9]\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4]\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Stacked Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst VerticalBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bar\",\n                  height: theme.isMobile ? \"480px\" : \"600px\",\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532],\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Vertical Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.verticalBarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst VerticalGroupedBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bar\",\n                  height: theme.isMobile ? \"480px\" : \"600px\",\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532]\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4]\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9]\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Vertical Grouped Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.verticalBarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst VerticalStackedBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bar\",\n                  height: theme.isMobile ? \"480px\" : \"600px\",\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  bar: {\n                        ...theme.chartConfig.plotOptions.column,\n                        stacking: 'normal',\n                  }\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [579, 45, 325, 277, 304, 209, 355, 95, 355, 566, 217, 532]\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9]\n                  },\n                  {\n                        name: \"Google\",\n                        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 295.6, 454.4]\n                  },\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Vertical Stacked Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.verticalBarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst PyramidBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bar\",\n                  height: theme.isMobile ? \"480px\" : \"600px\",\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        stacking: 'normal'\n                  }\n            },\n            xAxis: [{\n                  ...theme.chartConfig.xAxis,\n                  reversed: false,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            }, {\n                  ...theme.chartConfig.xAxis,\n                  opposite: true,\n                  reversed: false,\n                  linkedTo: 0,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            }],\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9]\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [-454.4, -295.6, -194.1, -216.4, -148.5, -135.6, -176, -144, -129.2, -106.4, -71.5, -29.9]\n                  },\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Pyramid Bar Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.verticalBarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst PyramidLipstickChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bar\",\n                  height: theme.isMobile ? \"480px\" : \"600px\",\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        stacking: 'normal'\n                  },\n            },\n            xAxis: [{\n                  ...theme.chartConfig.xAxis,\n                  reversed: false,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            }, {\n                  ...theme.chartConfig.xAxis,\n                  opposite: true,\n                  reversed: false,\n                  linkedTo: 0,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            }],\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9],\n                        borderRadiusTopLeft: \"50%\",\n                        borderRadiusTopRight: \"50%\",\n                        color: \"#f33535\"\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [-454.4, -295.6, -194.1, -216.4, -148.5, -135.6, -176, -144, -129.2, -106.4, -71.5, -29.9],\n                        borderRadiusBottomLeft: \"50%\",\n                        borderRadiusBottomRight: \"50%\",\n                        color: theme.chartConfig.colors[4]\n                  },\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Pyramid Lipstick Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.verticalBarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst PyramidLollipopChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"lollipop\",\n                  height: theme.isMobile ? \"480px\" : \"600px\",\n                  inverted: true\n            },\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  pointWidth: 50,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        stacking: 'normal',\n                        marker: {\n                              symbol: \"circle\",\n                              lineWidth: 5,\n                              radius: 15\n                        }\n                  }\n            },\n            xAxis: [{\n                  ...theme.chartConfig.xAxis,\n                  reversed: false,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            }, {\n                  ...theme.chartConfig.xAxis,\n                  opposite: true,\n                  reversed: false,\n                  linkedTo: 0,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            }],\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [454.4, 295.6, 194.1, 216.4, 148.5, 135.6, 176, 144, 129.2, 106.4, 71.5, 29.9],\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [-454.4, -295.6, -194.1, -216.4, -148.5, -135.6, -176, -144, -129.2, -106.4, -71.5, -29.9],\n                        color: theme.chartConfig.colors[4]\n                  },\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Pyramid Lollipop Chart\n                  </Typography>\n                  <Paper elevation={0} className={styl.verticalBarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsPatternFill from 'highcharts-pattern-fill';\nimport HighchartsMore from 'highcharts-more';\nimport HighchartBoost from 'highcharts/modules/boost';\nimport HighchartVariablePie from 'highcharts/modules/variable-pie';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartBoost(Highcharts);\nHighchartVariablePie(Highcharts);\n\nexport const Pie = () => (\n      <Fragment>\n            <SimplePieChart />\n            <MonochromePieChart />\n            <GradientPieChart />\n            <VariableChartPieChart />\n            <SemiCircleChart />\n      </Fragment>\n)\n\nconst SimplePieChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              sliced: true,\n                              selected: true,\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                        }, {\n                              name: \"Disney\",\n                              y: 5\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Pie Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MonochromePieChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              sliced: true,\n                              selected: true,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.42).get('rgb')\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.28).get('rgb')\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.14).get('rgb')\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0).get('rgb')\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0.14).get('rgb')\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0.28).get('rgb')\n                        }, {\n                              name: \"Disney\",\n                              y: 5,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0.42).get('rgb')\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Monochromatic Pie Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst GradientPieChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              sliced: true,\n                              selected: true,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[0]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[1]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[1]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[2]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[2]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[3]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[3]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[4]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[4]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[5]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[5]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Disney\",\n                              y: 5,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[6]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[6]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Gradient Pie Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst VariableChartPieChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"variablepie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              z: 30\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                              z: 20\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                              z: 25\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                              z: 30\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                              z: 35\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                              z: 40\n                        }, {\n                              name: \"Disney\",\n                              y: 5,\n                              z: 25\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Variable Size Pie Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SemiCircleChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            plotOptions: {\n                  pie: {\n                        ...theme.chartConfig.plotOptions.pie,\n                        startAngle: -90,\n                        endAngle: 90,\n                        center: ['50%', '75%'],\n                        size: '110%'\n                  }\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                        }, {\n                              name: \"Disney\",\n                              y: 5\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Half Pie Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartBoost from 'highcharts/modules/boost';\nimport HighchartVariablePie from 'highcharts/modules/variable-pie';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartBoost(Highcharts);\nHighchartVariablePie(Highcharts);\n\nexport const Donut = () => (\n      <Fragment>\n            <SimpleDonutChart />\n            <MonochromeDonutChart />\n            <GradientDonutChart />\n            <VariableChartDonutChart />\n            <SemiCircleChart />\n      </Fragment>\n)\n\nconst SimpleDonutChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        minPointSize: 10,\n                        innerSize: '50%',\n                        zMin: 0,\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                        }, {\n                              name: \"Disney\",\n                              y: 5\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Donut Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MonochromeDonutChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        minPointSize: 10,\n                        innerSize: '50%',\n                        zMin: 0,\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.42).get('rgb')\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.28).get('rgb')\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.14).get('rgb')\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0).get('rgb')\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0.14).get('rgb')\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0.28).get('rgb')\n                        }, {\n                              name: \"Disney\",\n                              y: 5,\n                              color: Highcharts.color(theme.chartConfig.colors[0]).brighten(0.42).get('rgb')\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Monochromatic Donut Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst GradientDonutChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        minPointSize: 10,\n                        innerSize: '50%',\n                        zMin: 0,\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[0]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[1]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[1]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[2]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[2]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[3]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[3]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[4]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[4]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[5]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[5]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }, {\n                              name: \"Disney\",\n                              y: 5,\n                              color: {\n                                    radialGradient: { cx: 0.5, cy: 0.5, r: 0.5 },\n                                    stops: [\n                                          [0, theme.chartConfig.colors[6]],\n                                          [1, Highcharts.color(theme.chartConfig.colors[6]).brighten(-0.3).get('rgb')],\n                                    ]\n                              },\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Gradient Donut Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst VariableChartDonutChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"variablepie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        minPointSize: 10,\n                        innerSize: '30%',\n                        zMin: 0,\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                              z: 30\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                              z: 20\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                              z: 25\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                              z: 30\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                              z: 35\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                              z: 40\n                        }, {\n                              name: \"Disney\",\n                              y: 5,\n                              z: 10\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Variable Size Donut Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SemiCircleChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"pie\",\n                  height: \"100%\"\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            plotOptions: {\n                  pie: {\n                        ...theme.chartConfig.plotOptions.pie,\n                        startAngle: -90,\n                        endAngle: 90,\n                        center: ['50%', '75%'],\n                        size: '110%'\n                  }\n            },\n            tooltip: {\n                  pointFormat: '<span>{series.name}</span>: <b>{point.percentage:.1f} %</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        minPointSize: 10,\n                        innerSize: '50%',\n                        zMin: 0,\n                        data: [{\n                              name: \"Analytixa\",\n                              y: 40,\n                        }, {\n                              name: \"Apple\",\n                              y: 15,\n                        }, {\n                              name: \"Google\",\n                              y: 10,\n                        }, {\n                              name: \"Amazon\",\n                              y: 15,\n                        }, {\n                              name: \"Microsoft\",\n                              y: 5,\n                        }, {\n                              name: \"Adobe\",\n                              y: 10,\n                        }, {\n                              name: \"Disney\",\n                              y: 5\n                        }],\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Rainbow Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsPatternFill from 'highcharts-pattern-fill';\nimport HighchartsMore from 'highcharts-more';\nimport HighchartBoost from 'highcharts/modules/boost';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartBoost(Highcharts);\n\nexport const ScatterPlot = () => (\n      <Fragment>\n            <SimpleScatterPlot />\n            <DotScatterPlot />\n            <MillionScatterPlot />\n      </Fragment>\n)\n\nconst MillionScatterPlot = () => {\n      const data = [];\n      const n = 1000000;\n      for (var i = 0; i < n; i += 1) {\n            data.push([\n                  Math.pow(Math.random(), 2) * 100,\n                  Math.pow(Math.random(), 2) * 100\n            ]);\n      }\n\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            chart: {\n                  ...theme.chartConfig.chart,\n                  zoomType: 'xy'\n            },\n            boost: {\n                  useGPUTranslations: true,\n                  usePreAllocated: true\n            },\n            xAxis: {\n                  min: 0,\n                  max: 100,\n                  gridLineWidth: 1,\n            },\n            yAxis: {\n                  min: 0,\n                  max: 100,\n                  minPadding: 0,\n                  maxPadding: 0,\n                  title: {\n                        text: null\n                  }\n            },\n            legend: {\n                  enabled: false\n            },\n            credits: {\n                  enabled: false\n            },\n            tooltip: {\n                  backgroundColor: \"#FFFFFFE0\",\n                  borderRadius: 20,\n                  shadow: false,\n                  useHTML: false,\n                  crosshairs: true,\n                  shared: true,\n                  style: {\n                        padding: 0\n                  },\n                  pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.x:.1f}, {point.y:.1f}</b>{point.change}<br/>',\n                  valueDecimals: 2,\n                  split: true\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data,\n                        type: 'scatter',\n                        marker: {\n                              radius: 0.5\n                        },\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        1 Million Dots Scatter Plot\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\nconst SimpleScatterPlot = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"scatter\",\n                  zoomType: 'xy'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        color: fade(theme.chartConfig.colors[0], 0.3),\n                        data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6],\n                        [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2],\n                        [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0],\n                        [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8],\n                        [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8],\n                        [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0],\n                        [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8],\n                        [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6],\n                        [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3],\n                        [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8],\n                        [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3],\n                        [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3],\n                        [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0],\n                        [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7],\n                        [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5],\n                        [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2],\n                        [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8],\n                        [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9],\n                        [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2],\n                        [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4],\n                        [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4],\n                        [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2],\n                        [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0],\n                        [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0],\n                        [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4],\n                        [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4],\n                        [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5],\n                        [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5],\n                        [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2],\n                        [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2],\n                        [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3],\n                        [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5],\n                        [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4],\n                        [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6],\n                        [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8],\n                        [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1],\n                        [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5],\n                        [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2],\n                        [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6],\n                        [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0],\n                        [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0],\n                        [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9],\n                        [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1],\n                        [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4],\n                        [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7],\n                        [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5],\n                        [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8],\n                        [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0],\n                        [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9],\n                        [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6],\n                        [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8],\n                        [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3]],\n                  },\n                  {\n                        name: \"Google\",\n                        color: fade(theme.chartConfig.colors[1], 0.3),\n                        data: [[174.0, 65.6], [175.3, 71.8], [193.5, 80.7], [186.5, 72.6], [187.2, 78.8],\n                        [181.5, 74.8], [184.0, 86.4], [184.5, 78.4], [175.0, 62.0], [184.0, 81.6],\n                        [180.0, 76.6], [177.8, 83.6], [192.0, 90.0], [176.0, 74.6], [174.0, 71.0],\n                        [184.0, 79.6], [192.7, 93.8], [171.5, 70.0], [173.0, 72.4], [176.0, 85.9],\n                        [176.0, 78.8], [180.5, 77.8], [172.7, 66.2], [176.0, 86.4], [173.5, 81.8],\n                        [178.0, 89.6], [180.3, 82.8], [180.3, 76.4], [164.5, 63.2], [173.0, 60.9],\n                        [183.5, 74.8], [175.5, 70.0], [188.0, 72.4], [189.2, 84.1], [172.8, 69.1],\n                        [170.0, 59.5], [182.0, 67.2], [170.0, 61.3], [177.8, 68.6], [184.2, 80.1],\n                        [186.7, 87.8], [171.4, 84.7], [172.7, 73.4], [175.3, 72.1], [180.3, 82.6],\n                        [182.9, 88.7], [188.0, 84.1], [177.2, 94.1], [172.1, 74.9], [167.0, 59.1],\n                        [169.5, 75.6], [174.0, 86.2], [172.7, 75.3], [182.2, 87.1], [164.1, 55.2],\n                        [163.0, 57.0], [171.5, 61.4], [184.2, 76.8], [174.0, 86.8], [174.0, 72.2],\n                        [177.0, 71.6], [186.0, 84.8], [167.0, 68.2], [171.8, 66.1], [182.0, 72.0],\n                        [167.0, 64.6], [177.8, 74.8], [164.5, 70.0], [192.0, 101.6], [175.5, 63.2],\n                        [171.2, 79.1], [181.6, 78.9], [167.4, 67.7], [181.1, 66.0], [177.0, 68.2],\n                        [174.5, 63.9], [177.5, 72.0], [170.5, 56.8], [182.4, 74.5], [197.1, 90.9],\n                        [180.1, 93.0], [175.5, 80.9], [180.6, 72.7], [184.4, 68.0], [175.5, 70.9],\n                        [180.6, 72.5], [177.0, 72.5], [177.1, 83.4], [181.6, 75.5], [176.5, 73.0],\n                        [175.0, 70.2], [174.0, 73.4], [165.1, 70.5], [177.0, 68.9], [192.0, 102.3],\n                        [176.5, 68.4], [169.4, 65.9], [182.1, 75.7], [179.8, 84.5], [175.3, 87.7],\n                        [184.9, 86.4], [177.3, 73.2], [167.4, 53.9], [178.1, 72.0], [168.9, 55.5],\n                        [157.2, 58.4], [180.3, 83.2], [170.2, 72.7], [177.8, 64.1], [172.7, 72.3],\n                        [165.1, 65.0], [186.7, 86.4], [165.1, 65.0], [174.0, 88.6], [175.3, 84.1],\n                        [185.4, 66.8], [177.8, 75.5], [180.3, 93.2], [180.3, 82.7], [177.8, 58.0],\n                        [177.8, 79.5], [177.8, 78.6], [177.8, 71.8], [177.8, 116.4], [163.8, 72.2],\n                        [188.0, 83.6], [198.1, 85.5], [175.3, 90.9], [166.4, 85.9], [190.5, 89.1],\n                        [166.4, 75.0], [177.8, 77.7], [179.7, 86.4], [172.7, 90.9], [190.5, 73.6],\n                        [185.4, 76.4], [168.9, 69.1], [167.6, 84.5], [175.3, 64.5], [170.2, 69.1],\n                        [190.5, 108.6], [177.8, 86.4], [190.5, 80.9], [177.8, 87.7], [184.2, 94.5],\n                        [176.5, 80.2], [177.8, 72.0], [180.3, 71.4], [171.4, 72.7], [172.7, 84.1],\n                        [172.7, 76.8], [177.8, 63.6], [177.8, 80.9], [182.9, 80.9], [170.2, 85.5],\n                        [167.6, 68.6], [175.3, 67.7], [165.1, 66.4], [185.4, 102.3], [181.6, 70.5],\n                        [172.7, 95.9], [190.5, 84.1], [179.1, 87.3], [175.3, 71.8], [170.2, 65.9],\n                        [193.0, 95.9], [171.4, 91.4], [177.8, 81.8], [177.8, 96.8], [167.6, 69.1],\n                        [167.6, 82.7], [180.3, 75.5], [182.9, 79.5], [176.5, 73.6], [186.7, 91.8],\n                        [188.0, 84.1], [188.0, 85.9], [177.8, 81.8], [174.0, 82.5], [177.8, 80.5],\n                        [171.4, 70.0], [185.4, 81.8], [185.4, 84.1], [188.0, 90.5], [188.0, 91.4],\n                        [182.9, 89.1], [176.5, 85.0], [175.3, 69.1], [175.3, 73.6], [188.0, 80.5],\n                        [188.0, 82.7], [175.3, 86.4], [170.5, 67.7], [179.1, 92.7], [177.8, 93.6],\n                        [175.3, 70.9], [182.9, 75.0], [170.8, 93.2], [188.0, 93.2], [180.3, 77.7],\n                        [177.8, 61.4], [185.4, 94.1], [168.9, 75.0], [185.4, 83.6], [180.3, 85.5],\n                        [174.0, 73.9], [167.6, 66.8], [182.9, 87.3], [160.0, 72.3], [180.3, 88.6],\n                        [167.6, 75.5], [186.7, 101.4], [175.3, 91.1], [175.3, 67.3], [175.9, 77.7],\n                        [175.3, 81.8], [179.1, 75.5], [181.6, 84.5], [177.8, 76.6], [182.9, 85.0],\n                        [177.8, 102.5], [184.2, 77.3], [179.1, 71.8], [176.5, 87.9], [188.0, 94.3],\n                        [174.0, 70.9], [167.6, 64.5], [170.2, 77.3], [167.6, 72.3], [188.0, 87.3],\n                        [174.0, 80.0], [176.5, 82.3], [180.3, 73.6], [167.6, 74.1], [188.0, 85.9],\n                        [180.3, 73.2], [167.6, 76.3], [183.0, 65.9], [183.0, 90.9], [179.1, 89.1],\n                        [170.2, 62.3], [177.8, 82.7], [179.1, 79.1], [190.5, 98.2], [177.8, 84.1],\n                        [180.3, 83.2], [180.3, 83.2]]\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Scatter Plot\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\nconst DotScatterPlot = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"scatter\",\n                  zoomType: 'xy'\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            plotOptions: {\n                  scatter: {\n                        ...theme.chartConfig.scatter,\n                        marker: {\n                              radius: 1,\n                              lineWidth: 0,\n                              lineColor: \"#FFFFFFA0\",\n                              states: {\n                                    hover: {\n                                          enabled: true,\n                                          lineColor: theme.text[20]\n                                    }\n                              }\n                        },\n                  }\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6],\n                        [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2],\n                        [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0],\n                        [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8],\n                        [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8],\n                        [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0],\n                        [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8],\n                        [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6],\n                        [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3],\n                        [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8],\n                        [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3],\n                        [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3],\n                        [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0],\n                        [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7],\n                        [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5],\n                        [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2],\n                        [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8],\n                        [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9],\n                        [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2],\n                        [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4],\n                        [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4],\n                        [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2],\n                        [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0],\n                        [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0],\n                        [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4],\n                        [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4],\n                        [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5],\n                        [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5],\n                        [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2],\n                        [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2],\n                        [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3],\n                        [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5],\n                        [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4],\n                        [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6],\n                        [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8],\n                        [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1],\n                        [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5],\n                        [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2],\n                        [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6],\n                        [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0],\n                        [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0],\n                        [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9],\n                        [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1],\n                        [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4],\n                        [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7],\n                        [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5],\n                        [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8],\n                        [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0],\n                        [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9],\n                        [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6],\n                        [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8],\n                        [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3]],\n                  },\n                  {\n                        name: \"Google\",\n                        data: [[174.0, 65.6], [175.3, 71.8], [193.5, 80.7], [186.5, 72.6], [187.2, 78.8],\n                        [181.5, 74.8], [184.0, 86.4], [184.5, 78.4], [175.0, 62.0], [184.0, 81.6],\n                        [180.0, 76.6], [177.8, 83.6], [192.0, 90.0], [176.0, 74.6], [174.0, 71.0],\n                        [184.0, 79.6], [192.7, 93.8], [171.5, 70.0], [173.0, 72.4], [176.0, 85.9],\n                        [176.0, 78.8], [180.5, 77.8], [172.7, 66.2], [176.0, 86.4], [173.5, 81.8],\n                        [178.0, 89.6], [180.3, 82.8], [180.3, 76.4], [164.5, 63.2], [173.0, 60.9],\n                        [183.5, 74.8], [175.5, 70.0], [188.0, 72.4], [189.2, 84.1], [172.8, 69.1],\n                        [170.0, 59.5], [182.0, 67.2], [170.0, 61.3], [177.8, 68.6], [184.2, 80.1],\n                        [186.7, 87.8], [171.4, 84.7], [172.7, 73.4], [175.3, 72.1], [180.3, 82.6],\n                        [182.9, 88.7], [188.0, 84.1], [177.2, 94.1], [172.1, 74.9], [167.0, 59.1],\n                        [169.5, 75.6], [174.0, 86.2], [172.7, 75.3], [182.2, 87.1], [164.1, 55.2],\n                        [163.0, 57.0], [171.5, 61.4], [184.2, 76.8], [174.0, 86.8], [174.0, 72.2],\n                        [177.0, 71.6], [186.0, 84.8], [167.0, 68.2], [171.8, 66.1], [182.0, 72.0],\n                        [167.0, 64.6], [177.8, 74.8], [164.5, 70.0], [192.0, 101.6], [175.5, 63.2],\n                        [171.2, 79.1], [181.6, 78.9], [167.4, 67.7], [181.1, 66.0], [177.0, 68.2],\n                        [174.5, 63.9], [177.5, 72.0], [170.5, 56.8], [182.4, 74.5], [197.1, 90.9],\n                        [180.1, 93.0], [175.5, 80.9], [180.6, 72.7], [184.4, 68.0], [175.5, 70.9],\n                        [180.6, 72.5], [177.0, 72.5], [177.1, 83.4], [181.6, 75.5], [176.5, 73.0],\n                        [175.0, 70.2], [174.0, 73.4], [165.1, 70.5], [177.0, 68.9], [192.0, 102.3],\n                        [176.5, 68.4], [169.4, 65.9], [182.1, 75.7], [179.8, 84.5], [175.3, 87.7],\n                        [184.9, 86.4], [177.3, 73.2], [167.4, 53.9], [178.1, 72.0], [168.9, 55.5],\n                        [157.2, 58.4], [180.3, 83.2], [170.2, 72.7], [177.8, 64.1], [172.7, 72.3],\n                        [165.1, 65.0], [186.7, 86.4], [165.1, 65.0], [174.0, 88.6], [175.3, 84.1],\n                        [185.4, 66.8], [177.8, 75.5], [180.3, 93.2], [180.3, 82.7], [177.8, 58.0],\n                        [177.8, 79.5], [177.8, 78.6], [177.8, 71.8], [177.8, 116.4], [163.8, 72.2],\n                        [188.0, 83.6], [198.1, 85.5], [175.3, 90.9], [166.4, 85.9], [190.5, 89.1],\n                        [166.4, 75.0], [177.8, 77.7], [179.7, 86.4], [172.7, 90.9], [190.5, 73.6],\n                        [185.4, 76.4], [168.9, 69.1], [167.6, 84.5], [175.3, 64.5], [170.2, 69.1],\n                        [190.5, 108.6], [177.8, 86.4], [190.5, 80.9], [177.8, 87.7], [184.2, 94.5],\n                        [176.5, 80.2], [177.8, 72.0], [180.3, 71.4], [171.4, 72.7], [172.7, 84.1],\n                        [172.7, 76.8], [177.8, 63.6], [177.8, 80.9], [182.9, 80.9], [170.2, 85.5],\n                        [167.6, 68.6], [175.3, 67.7], [165.1, 66.4], [185.4, 102.3], [181.6, 70.5],\n                        [172.7, 95.9], [190.5, 84.1], [179.1, 87.3], [175.3, 71.8], [170.2, 65.9],\n                        [193.0, 95.9], [171.4, 91.4], [177.8, 81.8], [177.8, 96.8], [167.6, 69.1],\n                        [167.6, 82.7], [180.3, 75.5], [182.9, 79.5], [176.5, 73.6], [186.7, 91.8],\n                        [188.0, 84.1], [188.0, 85.9], [177.8, 81.8], [174.0, 82.5], [177.8, 80.5],\n                        [171.4, 70.0], [185.4, 81.8], [185.4, 84.1], [188.0, 90.5], [188.0, 91.4],\n                        [182.9, 89.1], [176.5, 85.0], [175.3, 69.1], [175.3, 73.6], [188.0, 80.5],\n                        [188.0, 82.7], [175.3, 86.4], [170.5, 67.7], [179.1, 92.7], [177.8, 93.6],\n                        [175.3, 70.9], [182.9, 75.0], [170.8, 93.2], [188.0, 93.2], [180.3, 77.7],\n                        [177.8, 61.4], [185.4, 94.1], [168.9, 75.0], [185.4, 83.6], [180.3, 85.5],\n                        [174.0, 73.9], [167.6, 66.8], [182.9, 87.3], [160.0, 72.3], [180.3, 88.6],\n                        [167.6, 75.5], [186.7, 101.4], [175.3, 91.1], [175.3, 67.3], [175.9, 77.7],\n                        [175.3, 81.8], [179.1, 75.5], [181.6, 84.5], [177.8, 76.6], [182.9, 85.0],\n                        [177.8, 102.5], [184.2, 77.3], [179.1, 71.8], [176.5, 87.9], [188.0, 94.3],\n                        [174.0, 70.9], [167.6, 64.5], [170.2, 77.3], [167.6, 72.3], [188.0, 87.3],\n                        [174.0, 80.0], [176.5, 82.3], [180.3, 73.6], [167.6, 74.1], [188.0, 85.9],\n                        [180.3, 73.2], [167.6, 76.3], [183.0, 65.9], [183.0, 90.9], [179.1, 89.1],\n                        [170.2, 62.3], [177.8, 82.7], [179.1, 79.1], [190.5, 98.2], [177.8, 84.1],\n                        [180.3, 83.2], [180.3, 83.2]]\n                  },\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Dot Scatter Plot\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsPatternFill from 'highcharts-pattern-fill';\nimport HighchartsMore from 'highcharts-more';\nimport HighchartBoost from 'highcharts/modules/boost';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartBoost(Highcharts);\n\nexport const BubblePlot = () => (\n      <Fragment>\n            <SimpleBubblePlot />\n            <ThreeDimensionalBubblePlot />\n            <GroupedBubblePlot />\n            <GroupedSplitBubblePlot />\n      </Fragment>\n)\n\nconst SimpleBubblePlot = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bubble\",\n                  zoomType: 'xy'\n            },\n            yAxis: {\n                  ...theme.chartConfig.yAxis,\n                  plotLines: [{\n                        color: theme.text[30],\n                        dashStyle: 'longdashdot',\n                        width: 1,\n                        value: 50,\n                        label: {\n                              align: 'right',\n                              style: {\n                                    fontStyle: 'italic'\n                              },\n                              text: 'Y-Axis threshold',\n                              x: -10\n                        },\n                        zIndex: 3\n                  }],\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n                  plotLines: [{\n                        color: theme.text[30],\n                        dashStyle: 'longdashdot',\n                        width: 1,\n                        value: 65,\n                        label: {\n                              rotation: 0,\n                              y: 15,\n                              style: {\n                                    fontStyle: 'italic'\n                              },\n                              text: 'X-Axis threshold'\n                        },\n                        zIndex: 3\n                  }],\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [{ \"x\": 75, \"y\": 95, \"z\": 13.8 }, { \"x\": 46.5, \"y\": 102.9, \"z\": 14.7 }, { \"x\": 70.8, \"y\": 91.5, \"z\": 15.8 }, { \"x\": 82.4, \"y\": 102.5, \"z\": 12 }, { \"x\": 80.3, \"y\": 76.1, \"z\": 11.8 }, { \"x\": 78.4, \"y\": 60.1, \"z\": 16.6 }, { \"x\": 74.2, \"y\": 88.5, \"z\": 14.5 }, { \"x\": 73.5, \"y\": 43.1, \"z\": 10 }, { \"x\": 77, \"y\": 53.2, \"z\": 24.7 }, { \"x\": 59.2, \"y\": 97.6, \"z\": 10.4 }, { \"x\": 48.6, \"y\": 40, \"z\": 16 }, { \"x\": 65.5, \"y\": 86.4, \"z\": 35.3 }, { \"x\": 45.4, \"y\": 80.8, \"z\": 28.5 }, { \"x\": 53.4, \"y\": 91.8, \"z\": 15.4 }, { \"x\": 74, \"y\": 62.9, \"z\": 31.3 }],\n                        marker: {\n                              lineWidth: 1,\n                        }\n                  },\n                  {\n                        name: \"Google\",\n                        data: [{ \"x\": 64, \"y\": 82.9, \"z\": 31.3 }, { \"x\": 63.4, \"y\": 51.8, \"z\": 15.4 }, { \"x\": 65.4, \"y\": 50.8, \"z\": 28.5 }, { \"x\": 65.5, \"y\": 126.4, \"z\": 35.3 }, { \"x\": 68.6, \"y\": 20, \"z\": 16 }, { \"x\": 69.2, \"y\": 57.6, \"z\": 10.4 }, { \"x\": 71, \"y\": 93.2, \"z\": 24.7 }, { \"x\": 73.5, \"y\": 83.1, \"z\": 10 }, { \"x\": 74.2, \"y\": 68.5, \"z\": 14.5 }, { \"x\": 78.4, \"y\": 70.1, \"z\": 16.6 }, { \"x\": 80.3, \"y\": 86.1, \"z\": 11.8 }, { \"x\": 80.4, \"y\": 102.5, \"z\": 12 }, { \"x\": 80.8, \"y\": 91.5, \"z\": 15.8 }, { \"x\": 86.5, \"y\": 102.9, \"z\": 14.7 }, { \"x\": 95, \"y\": 95, \"z\": 13.8 }],\n                        marker: {\n                              lineWidth: 1,\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Bubble Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\nconst ThreeDimensionalBubblePlot = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bubble\",\n                  zoomType: 'xy'\n            },\n            yAxis: {\n                  ...theme.chartConfig.yAxis,\n                  plotLines: [{\n                        color: theme.text[30],\n                        dashStyle: 'longdashdot',\n                        width: 1,\n                        value: 50,\n                        label: {\n                              align: 'right',\n                              style: {\n                                    fontStyle: 'italic'\n                              },\n                              text: 'Y-Axis threshold',\n                              x: -10\n                        },\n                        zIndex: 3\n                  }],\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n                  plotLines: [{\n                        color: theme.text[30],\n                        dashStyle: 'longdashdot',\n                        width: 1,\n                        value: 65,\n                        label: {\n                              rotation: 0,\n                              y: 15,\n                              style: {\n                                    fontStyle: 'italic'\n                              },\n                              text: 'X-Axis threshold'\n                        },\n                        zIndex: 3\n                  }],\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [{ \"x\": 61, \"y\": 62.9, \"z\": 31.3 }, { \"x\": 53.4, \"y\": 61.8, \"z\": 15.4 }, { \"x\": 45.4, \"y\": 80.8, \"z\": 28.5 }, { \"x\": 69.5, \"y\": 86.4, \"z\": 35.3 }, { \"x\": 48.6, \"y\": 50, \"z\": 16 }, { \"x\": 59.2, \"y\": 97.6, \"z\": 10.4 }, { \"x\": 77, \"y\": 53.2, \"z\": 24.7 }, { \"x\": 63.5, \"y\": 43.1, \"z\": 10 }, { \"x\": 74.2, \"y\": 88.5, \"z\": 14.5 }, { \"x\": 88.4, \"y\": 60.1, \"z\": 16.6 }, { \"x\": 80.3, \"y\": 76.1, \"z\": 11.8 }, { \"x\": 82.4, \"y\": 102.5, \"z\": 12 }, { \"x\": 70.8, \"y\": 91.5, \"z\": 15.8 }, { \"x\": 46.5, \"y\": 102.9, \"z\": 14.7 }, { \"x\": 75, \"y\": 95, \"z\": 13.8 }],\n                        marker: {\n                              fillColor: {\n                                    radialGradient: { cx: 0.4, cy: 0.3, r: 0.7 },\n                                    stops: [\n                                          [0, \"#FFFFFFE0\"],\n                                          [1, fade(theme.chartConfig.colors[0], 0.5)]\n                                    ]\n                              },\n                              lineWidth: 1,\n                        }\n                  },\n                  {\n                        name: \"Google\",\n                        data: [{ \"x\": 54, \"y\": 82.9, \"z\": 31.3 }, { \"x\": 63.4, \"y\": 61.8, \"z\": 15.4 }, { \"x\": 65.4, \"y\": 30.8, \"z\": 28.5 }, { \"x\": 65.5, \"y\": 126.4, \"z\": 35.3 }, { \"x\": 58.6, \"y\": 20, \"z\": 16 }, { \"x\": 79.2, \"y\": 57.6, \"z\": 20.4 }, { \"x\": 71, \"y\": 53.2, \"z\": 24.7 }, { \"x\": 73.5, \"y\": 83.1, \"z\": 10 }, { \"x\": 74.2, \"y\": 68.5, \"z\": 14.5 }, { \"x\": 78.4, \"y\": 70.1, \"z\": 16.6 }, { \"x\": 80.3, \"y\": 86.1, \"z\": 11.8 }, { \"x\": 80.4, \"y\": 102.5, \"z\": 12 }, { \"x\": 80.8, \"y\": 91.5, \"z\": 15.8 }, { \"x\": 86.5, \"y\": 102.9, \"z\": 14.7 }, { \"x\": 95, \"y\": 95, \"z\": 13.8 }],\n                        marker: {\n                              fillColor: {\n                                    radialGradient: { cx: 0.4, cy: 0.3, r: 0.7 },\n                                    stops: [\n                                          [0, \"#FFFFFFE0\"],\n                                          [1, fade(theme.chartConfig.colors[1], 0.5)]\n                                    ]\n                              },\n                              lineWidth: 1,\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        3D Bubble Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleBar}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\nconst GroupedBubblePlot = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"packedbubble\",\n                  height: \"100%\"\n            },\n            plotOptions: {\n                  packedbubble: {\n                        minSize: '30%',\n                        maxSize: '120%',\n                        zoneAxis: \"x\",\n                        zMin: 0,\n                        zMax: 1000,\n                        layoutAlgorithm: {\n                              splitSeries: false,\n                              gravitationalConstant: 0.02\n                        },\n                  },\n            },\n            tooltip: {\n                  backgroundColor: \"#FFFFFFE0\",\n                  borderRadius: 20,\n                  shadow: false,\n                  useHTML: false,\n                  crosshairs: true,\n                  shared: true,\n                  style: {\n                        padding: 0\n                  },\n                  valueDecimals: 2,\n                  pointFormat: '<span style=\"color:{series.color}\">{point.name}</span>: <b>{point.value}</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [{ \"name\": \"Member0\", \"value\": 579 }, { \"name\": \"Member1\", \"value\": 45 }, { \"name\": \"Member2\", \"value\": 325 }, { \"name\": \"Member3\", \"value\": 277 }, { \"name\": \"Member4\", \"value\": 304 }, { \"name\": \"Member5\", \"value\": 209 }, { \"name\": \"Member6\", \"value\": 355 }, { \"name\": \"Member7\", \"value\": 95 }, { \"name\": \"Member8\", \"value\": 355 }, { \"name\": \"Member9\", \"value\": 566 }, { \"name\": \"Member10\", \"value\": 217 }, { \"name\": \"Member11\", \"value\": 532 }],\n                  },\n                  {\n                        name: \"Google\",\n                        data: [{ \"name\": \"Member0\", \"value\": 29.9 }, { \"name\": \"Member1\", \"value\": 71.5 }, { \"name\": \"Member2\", \"value\": 106.4 }, { \"name\": \"Member3\", \"value\": 129.2 }, { \"name\": \"Member4\", \"value\": 144 }, { \"name\": \"Member5\", \"value\": 176 }, { \"name\": \"Member6\", \"value\": 135.6 }, { \"name\": \"Member7\", \"value\": 148.5 }, { \"name\": \"Member8\", \"value\": 216.4 }, { \"name\": \"Member9\", \"value\": 194.1 }, { \"name\": \"Member10\", \"value\": 295.6 }, { \"name\": \"Member11\", \"value\": 454.4 }],\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [{ \"name\": \"Member0\", \"value\": 454.4 }, { \"name\": \"Member1\", \"value\": 295.6 }, { \"name\": \"Member2\", \"value\": 194.1 }, { \"name\": \"Member3\", \"value\": 216.4 }, { \"name\": \"Member4\", \"value\": 148.5 }, { \"name\": \"Member5\", \"value\": 135.6 }, { \"name\": \"Member6\", \"value\": 176 }, { \"name\": \"Member7\", \"value\": 144 }, { \"name\": \"Member8\", \"value\": 129.2 }, { \"name\": \"Member9\", \"value\": 106.4 }, { \"name\": \"Member10\", \"value\": 71.5 }, { \"name\": \"Member11\", \"value\": 29.9 }],\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Free Float Bubble Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperclusteredBubble}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\nconst GroupedSplitBubblePlot = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"packedbubble\",\n                  height: \"100%\"\n            },\n            plotOptions: {\n                  packedbubble: {\n                        minSize: '10%',\n                        maxSize: '100%',\n                        zoneAxis: \"x\",\n                        zMin: 0,\n                        zMax: 800,\n                        layoutAlgorithm: {\n                              splitSeries: true,\n                              gravitationalConstant: 0.1\n                        },\n                        dataLabels: {\n                              enabled: false,\n                        }\n                  },\n            },\n            tooltip: {\n                  backgroundColor: \"#FFFFFFE0\",\n                  borderRadius: 20,\n                  shadow: false,\n                  useHTML: false,\n                  crosshairs: true,\n                  shared: true,\n                  style: {\n                        padding: 0\n                  },\n                  valueDecimals: 2,\n                  pointFormat: '<span style=\"color:{series.color}\">{point.name}</span>: <b>{point.value}</b><br/>'\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data: [{ \"name\": \"Member0\", \"value\": 579 }, { \"name\": \"Member1\", \"value\": 45 }, { \"name\": \"Member2\", \"value\": 325 }, { \"name\": \"Member3\", \"value\": 277 }, { \"name\": \"Member4\", \"value\": 304 }, { \"name\": \"Member5\", \"value\": 209 }, { \"name\": \"Member6\", \"value\": 355 }, { \"name\": \"Member7\", \"value\": 95 }, { \"name\": \"Member8\", \"value\": 355 }, { \"name\": \"Member9\", \"value\": 566 }, { \"name\": \"Member10\", \"value\": 217 }, { \"name\": \"Member11\", \"value\": 532 }],\n                  },\n                  {\n                        name: \"Google\",\n                        data: [{ \"name\": \"Member0\", \"value\": 29.9 }, { \"name\": \"Member1\", \"value\": 71.5 }, { \"name\": \"Member2\", \"value\": 106.4 }, { \"name\": \"Member3\", \"value\": 129.2 }, { \"name\": \"Member4\", \"value\": 144 }, { \"name\": \"Member5\", \"value\": 176 }, { \"name\": \"Member6\", \"value\": 135.6 }, { \"name\": \"Member7\", \"value\": 148.5 }, { \"name\": \"Member8\", \"value\": 216.4 }, { \"name\": \"Member9\", \"value\": 194.1 }, { \"name\": \"Member10\", \"value\": 295.6 }, { \"name\": \"Member11\", \"value\": 454.4 }],\n                  },\n                  {\n                        name: \"Amazon\",\n                        data: [{ \"name\": \"Member0\", \"value\": 454.4 }, { \"name\": \"Member1\", \"value\": 295.6 }, { \"name\": \"Member2\", \"value\": 194.1 }, { \"name\": \"Member3\", \"value\": 216.4 }, { \"name\": \"Member4\", \"value\": 148.5 }, { \"name\": \"Member5\", \"value\": 135.6 }, { \"name\": \"Member6\", \"value\": 176 }, { \"name\": \"Member7\", \"value\": 144 }, { \"name\": \"Member8\", \"value\": 129.2 }, { \"name\": \"Member9\", \"value\": 106.4 }, { \"name\": \"Member10\", \"value\": 71.5 }, { \"name\": \"Member11\", \"value\": 29.9 }],\n                  }\n            ],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Clustered Bubble Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperclusteredBubble}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsTreeMap from 'highcharts/modules/treemap';\nimport HighchartBoost from 'highcharts/modules/boost';\nimport HighchartHeatMaps from 'highcharts/modules/heatmap';\nimport HighchartTileMaps from 'highcharts/modules/tilemap';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartBoost(Highcharts);\nHighchartHeatMaps(Highcharts);\nHighchartTileMaps(Highcharts);\nHighchartsTreeMap(Highcharts);\n\nexport const HeatMaps = () => (\n      <Fragment>\n            <MonochromaticHeatMap />\n            <SimpleHeatMap />\n            <MonochromaticTreeMap />\n            <DualTreeMap />\n            <GroupedTreeMap />\n            <SimpleTileMap />\n      </Fragment>\n)\n\n\nconst SimpleHeatMap = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const getPointCategoryName = (point, dimension) => {\n            var series = point.series,\n                  isY = dimension === 'y',\n                  axis = series[isY ? 'yAxis' : 'xAxis'];\n            return axis.categories[point[isY ? 'y' : 'x']];\n      }\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  marginTop: 40,\n                  height: \"480px\",\n                  type: 'heatmap',\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            yAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n                  title: null,\n                  reversed: true\n            },\n            colorAxis: {\n                  min: 0,\n                  minColor: \"#FE9677\",\n                  maxColor: theme.chartConfig.colors[0],\n                  marker: {\n                        animation: 200,\n                        width: theme.isMobile ? 3 : 7,\n                        color: theme.text[\"00\"]\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        dataLabels: {\n                              enabled: true,\n                              color: '#000000',\n                              style: {\n                                    textOutline: false\n                              }\n                        }\n                  }\n            },\n            tooltip: {\n                  formatter: function () {\n                        return '<span><b>' + getPointCategoryName(this.point, 'x') + '-' + getPointCategoryName(this.point, 'y') + '</b></span>: <b>' + this.point.value + '</b><br/>';\n                  }\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  verticalAlign: 'bottom',\n                  symbolWidth: theme.isMobile ? 300 : 990\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [[0, 0, 10], [0, 1, 19], [0, 2, 8], [0, 3, 24], [0, 4, 67], [1, 0, 92], [1, 1, 58], [1, 2, 78], [1, 3, 117], [1, 4, 48], [2, 0, 35], [2, 1, 15], [2, 2, 123], [2, 3, 64], [2, 4, 52], [3, 0, 72], [3, 1, 132], [3, 2, 114], [3, 3, 19], [3, 4, 16], [4, 0, 38], [4, 1, 5], [4, 2, 8], [4, 3, 117], [4, 4, 115], [5, 0, 88], [5, 1, 32], [5, 2, 12], [5, 3, 6], [5, 4, 120], [6, 0, 13], [6, 1, 44], [6, 2, 88], [6, 3, 98], [6, 4, 96], [7, 0, 31], [7, 1, 1], [7, 2, 82], [7, 3, 32], [7, 4, 30], [8, 0, 85], [8, 1, 97], [8, 2, 123], [8, 3, 64], [8, 4, 84], [9, 0, 47], [9, 1, 114], [9, 2, 31], [9, 3, 48], [9, 4, 91]],\n                        marker: {\n                              enabled: false\n                        },\n                        dataLabels: {\n                              enabled: true,\n                              color: theme.text[\"00\"]\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Dual Heat Map\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleHeat}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MonochromaticHeatMap = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const getPointCategoryName = (point, dimension) => {\n            var series = point.series,\n                  isY = dimension === 'y',\n                  axis = series[isY ? 'yAxis' : 'xAxis'];\n            return axis.categories[point[isY ? 'y' : 'x']];\n      }\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  marginTop: 40,\n                  height: \"480px\",\n                  type: 'heatmap',\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            yAxis: {\n                  ...theme.chartConfig.xAxis,\n                  categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n                  title: null,\n                  reversed: true\n            },\n            colorAxis: {\n                  min: 0,\n                  minColor: theme.background[\"00\"],\n                  maxColor: theme.chartConfig.colors[0],\n                  marker: {\n                        animation: 200,\n                        width: 7,\n                        color: theme.text[\"00\"]\n                  }\n            },\n            tooltip: {\n                  formatter: function () {\n                        return '<span><b>' + getPointCategoryName(this.point, 'x') + '-' + getPointCategoryName(this.point, 'y') + '</b></span>: <b>' + this.point.value + '</b><br/>';\n                  }\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  verticalAlign: 'bottom',\n                  symbolWidth: theme.isMobile ? 300 : 990\n            },\n            plotOptions: {\n                  series: {\n                        dataLabels: {\n                              enabled: true,\n                              color: '#000000',\n                              style: {\n                                    textOutline: false\n                              }\n                        }\n                  }\n            },\n            series: [\n                  {\n                        name: \"Turnover\",\n                        data: [[0, 0, 10], [0, 1, 19], [0, 2, 8], [0, 3, 24], [0, 4, 67], [1, 0, 92], [1, 1, 58], [1, 2, 78], [1, 3, 117], [1, 4, 48], [2, 0, 35], [2, 1, 15], [2, 2, 123], [2, 3, 64], [2, 4, 52], [3, 0, 72], [3, 1, 132], [3, 2, 114], [3, 3, 19], [3, 4, 16], [4, 0, 38], [4, 1, 5], [4, 2, 8], [4, 3, 117], [4, 4, 115], [5, 0, 88], [5, 1, 32], [5, 2, 12], [5, 3, 6], [5, 4, 120], [6, 0, 13], [6, 1, 44], [6, 2, 88], [6, 3, 98], [6, 4, 96], [7, 0, 31], [7, 1, 1], [7, 2, 82], [7, 3, 32], [7, 4, 30], [8, 0, 85], [8, 1, 97], [8, 2, 123], [8, 3, 64], [8, 4, 84], [9, 0, 47], [9, 1, 114], [9, 2, 31], [9, 3, 48], [9, 4, 91]],\n                        marker: {\n                              enabled: false\n                        },\n                        dataLabels: {\n                              enabled: true,\n                              color: theme.text[\"00\"]\n                        }\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Monochromatic Heat Map\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleHeat}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimpleTileMap = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const getPointCategoryName = (point, dimension) => {\n            var series = point.series,\n                  isY = dimension === 'y',\n                  axis = series[isY ? 'yAxis' : 'xAxis'];\n            return axis.categories[point[isY ? 'y' : 'x']];\n      }\n      const chartConfig = {\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'tilemap',\n                  inverted: true,\n                  height: theme.isMobile ? \"75%\" : '70%'\n            },\n            credits: {\n                  enabled: false\n            },\n            title: {\n                  text: \"\"\n            },\n            xAxis: {\n                  visible: false\n            },\n            yAxis: {\n                  visible: false\n            },\n            colorAxis: {\n                  dataClasses: [{\n                        from: 0,\n                        to: 1000000,\n                        color: '#F9EDB3',\n                        name: '< 1M'\n                  }, {\n                        from: 1000000,\n                        to: 5000000,\n                        color: '#FFC428',\n                        name: '1M - 5M'\n                  }, {\n                        from: 5000000,\n                        to: 20000000,\n                        color: '#FF7987',\n                        name: '5M - 20M'\n                  }, {\n                        from: 20000000,\n                        color: '#FF2371',\n                        name: '> 20M'\n                  }]\n            },\n            plotOptions: {\n                  series: {\n                        dataLabels: {\n                              enabled: true,\n                              format: '{point.hc-a2}',\n                              color: '#000000',\n                              style: {\n                                    textOutline: false\n                              }\n                        }\n                  }\n            },\n            tooltip: {\n                  headerFormat: '',\n                  formatter: function () {\n                        return '<span><b>' + getPointCategoryName(this.point, 'x') + '-' + getPointCategoryName(this.point, 'y') + '</b></span>: <b>' + this.point.value + '</b><br/>';\n                  }\n            },\n            series: [{\n                  name: '',\n                  data: [{\n                        'hc-a2': 'AL',\n                        name: 'Alabama',\n                        region: 'South',\n                        x: 6,\n                        y: 7,\n                        value: 4849377\n                  }, {\n                        'hc-a2': 'AK',\n                        name: 'Alaska',\n                        region: 'West',\n                        x: 0,\n                        y: 0,\n                        value: 737732\n                  }, {\n                        'hc-a2': 'AZ',\n                        name: 'Arizona',\n                        region: 'West',\n                        x: 5,\n                        y: 3,\n                        value: 6745408\n                  }, {\n                        'hc-a2': 'AR',\n                        name: 'Arkansas',\n                        region: 'South',\n                        x: 5,\n                        y: 6,\n                        value: 2994079\n                  }, {\n                        'hc-a2': 'CA',\n                        name: 'California',\n                        region: 'West',\n                        x: 5,\n                        y: 2,\n                        value: 39250017\n                  }, {\n                        'hc-a2': 'CO',\n                        name: 'Colorado',\n                        region: 'West',\n                        x: 4,\n                        y: 3,\n                        value: 5540545\n                  }, {\n                        'hc-a2': 'CT',\n                        name: 'Connecticut',\n                        region: 'Northeast',\n                        x: 3,\n                        y: 11,\n                        value: 3596677\n                  }, {\n                        'hc-a2': 'DE',\n                        name: 'Delaware',\n                        region: 'South',\n                        x: 4,\n                        y: 9,\n                        value: 935614\n                  }, {\n                        'hc-a2': 'DC',\n                        name: 'District of Columbia',\n                        region: 'South',\n                        x: 4,\n                        y: 10,\n                        value: 7288000\n                  }, {\n                        'hc-a2': 'FL',\n                        name: 'Florida',\n                        region: 'South',\n                        x: 8,\n                        y: 8,\n                        value: 20612439\n                  }, {\n                        'hc-a2': 'GA',\n                        name: 'Georgia',\n                        region: 'South',\n                        x: 7,\n                        y: 8,\n                        value: 10310371\n                  }, {\n                        'hc-a2': 'HI',\n                        name: 'Hawaii',\n                        region: 'West',\n                        x: 8,\n                        y: 0,\n                        value: 1419561\n                  }, {\n                        'hc-a2': 'ID',\n                        name: 'Idaho',\n                        region: 'West',\n                        x: 3,\n                        y: 2,\n                        value: 1634464\n                  }, {\n                        'hc-a2': 'IL',\n                        name: 'Illinois',\n                        region: 'Midwest',\n                        x: 3,\n                        y: 6,\n                        value: 12801539\n                  }, {\n                        'hc-a2': 'IN',\n                        name: 'Indiana',\n                        region: 'Midwest',\n                        x: 3,\n                        y: 7,\n                        value: 6596855\n                  }, {\n                        'hc-a2': 'IA',\n                        name: 'Iowa',\n                        region: 'Midwest',\n                        x: 3,\n                        y: 5,\n                        value: 3107126\n                  }, {\n                        'hc-a2': 'KS',\n                        name: 'Kansas',\n                        region: 'Midwest',\n                        x: 5,\n                        y: 5,\n                        value: 2904021\n                  }, {\n                        'hc-a2': 'KY',\n                        name: 'Kentucky',\n                        region: 'South',\n                        x: 4,\n                        y: 6,\n                        value: 4413457\n                  }, {\n                        'hc-a2': 'LA',\n                        name: 'Louisiana',\n                        region: 'South',\n                        x: 6,\n                        y: 5,\n                        value: 4649676\n                  }, {\n                        'hc-a2': 'ME',\n                        name: 'Maine',\n                        region: 'Northeast',\n                        x: 0,\n                        y: 11,\n                        value: 1330089\n                  }, {\n                        'hc-a2': 'MD',\n                        name: 'Maryland',\n                        region: 'South',\n                        x: 4,\n                        y: 8,\n                        value: 6016447\n                  }, {\n                        'hc-a2': 'MA',\n                        name: 'Massachusetts',\n                        region: 'Northeast',\n                        x: 2,\n                        y: 10,\n                        value: 6811779\n                  }, {\n                        'hc-a2': 'MI',\n                        name: 'Michigan',\n                        region: 'Midwest',\n                        x: 2,\n                        y: 7,\n                        value: 9928301\n                  }, {\n                        'hc-a2': 'MN',\n                        name: 'Minnesota',\n                        region: 'Midwest',\n                        x: 2,\n                        y: 4,\n                        value: 5519952\n                  }, {\n                        'hc-a2': 'MS',\n                        name: 'Mississippi',\n                        region: 'South',\n                        x: 6,\n                        y: 6,\n                        value: 2984926\n                  }, {\n                        'hc-a2': 'MO',\n                        name: 'Missouri',\n                        region: 'Midwest',\n                        x: 4,\n                        y: 5,\n                        value: 6093000\n                  }, {\n                        'hc-a2': 'MT',\n                        name: 'Montana',\n                        region: 'West',\n                        x: 2,\n                        y: 2,\n                        value: 1023579\n                  }, {\n                        'hc-a2': 'NE',\n                        name: 'Nebraska',\n                        region: 'Midwest',\n                        x: 4,\n                        y: 4,\n                        value: 1881503\n                  }, {\n                        'hc-a2': 'NV',\n                        name: 'Nevada',\n                        region: 'West',\n                        x: 4,\n                        y: 2,\n                        value: 2839099\n                  }, {\n                        'hc-a2': 'NH',\n                        name: 'New Hampshire',\n                        region: 'Northeast',\n                        x: 1,\n                        y: 11,\n                        value: 1326813\n                  }, {\n                        'hc-a2': 'NJ',\n                        name: 'New Jersey',\n                        region: 'Northeast',\n                        x: 3,\n                        y: 10,\n                        value: 8944469\n                  }, {\n                        'hc-a2': 'NM',\n                        name: 'New Mexico',\n                        region: 'West',\n                        x: 6,\n                        y: 3,\n                        value: 2085572\n                  }, {\n                        'hc-a2': 'NY',\n                        name: 'New York',\n                        region: 'Northeast',\n                        x: 2,\n                        y: 9,\n                        value: 19745289\n                  }, {\n                        'hc-a2': 'NC',\n                        name: 'North Carolina',\n                        region: 'South',\n                        x: 5,\n                        y: 9,\n                        value: 10146788\n                  }, {\n                        'hc-a2': 'ND',\n                        name: 'North Dakota',\n                        region: 'Midwest',\n                        x: 2,\n                        y: 3,\n                        value: 739482\n                  }, {\n                        'hc-a2': 'OH',\n                        name: 'Ohio',\n                        region: 'Midwest',\n                        x: 3,\n                        y: 8,\n                        value: 11614373\n                  }, {\n                        'hc-a2': 'OK',\n                        name: 'Oklahoma',\n                        region: 'South',\n                        x: 6,\n                        y: 4,\n                        value: 3878051\n                  }, {\n                        'hc-a2': 'OR',\n                        name: 'Oregon',\n                        region: 'West',\n                        x: 4,\n                        y: 1,\n                        value: 3970239\n                  }, {\n                        'hc-a2': 'PA',\n                        name: 'Pennsylvania',\n                        region: 'Northeast',\n                        x: 3,\n                        y: 9,\n                        value: 12784227\n                  }, {\n                        'hc-a2': 'RI',\n                        name: 'Rhode Island',\n                        region: 'Northeast',\n                        x: 2,\n                        y: 11,\n                        value: 1055173\n                  }, {\n                        'hc-a2': 'SC',\n                        name: 'South Carolina',\n                        region: 'South',\n                        x: 6,\n                        y: 8,\n                        value: 4832482\n                  }, {\n                        'hc-a2': 'SD',\n                        name: 'South Dakota',\n                        region: 'Midwest',\n                        x: 3,\n                        y: 4,\n                        value: 853175\n                  }, {\n                        'hc-a2': 'TN',\n                        name: 'Tennessee',\n                        region: 'South',\n                        x: 5,\n                        y: 7,\n                        value: 6651194\n                  }, {\n                        'hc-a2': 'TX',\n                        name: 'Texas',\n                        region: 'South',\n                        x: 7,\n                        y: 4,\n                        value: 27862596\n                  }, {\n                        'hc-a2': 'UT',\n                        name: 'Utah',\n                        region: 'West',\n                        x: 5,\n                        y: 4,\n                        value: 2942902\n                  }, {\n                        'hc-a2': 'VT',\n                        name: 'Vermont',\n                        region: 'Northeast',\n                        x: 1,\n                        y: 10,\n                        value: 626011\n                  }, {\n                        'hc-a2': 'VA',\n                        name: 'Virginia',\n                        region: 'South',\n                        x: 5,\n                        y: 8,\n                        value: 8411808\n                  }, {\n                        'hc-a2': 'WA',\n                        name: 'Washington',\n                        region: 'West',\n                        x: 2,\n                        y: 1,\n                        value: 7288000\n                  }, {\n                        'hc-a2': 'WV',\n                        name: 'West Virginia',\n                        region: 'South',\n                        x: 4,\n                        y: 7,\n                        value: 1850326\n                  }, {\n                        'hc-a2': 'WI',\n                        name: 'Wisconsin',\n                        region: 'Midwest',\n                        x: 2,\n                        y: 5,\n                        value: 5778708\n                  }, {\n                        'hc-a2': 'WY',\n                        name: 'Wyoming',\n                        region: 'West',\n                        x: 3,\n                        y: 3,\n                        value: 584153\n                  }]\n            }]\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Honeycomb Tile Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleTile}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MonochromaticTreeMap = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'treemap',\n                  marginTop: 40,\n                  layoutAlgorithm: 'squarified',\n                  height: theme.isMobile ? \"100%\" : \"45%\"\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  verticalAlign: 'bottom',\n                  symbolWidth: theme.isMobile ? 325 : 1025\n            },\n            colorAxis: {\n                  minColor: theme.background[\"00\"],\n                  maxColor: theme.chartConfig.colors[4],\n                  marker: {\n                        animation: 200,\n                        width: 7,\n                        color: theme.text[\"00\"]\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        dataLabels: {\n                              enabled: true,\n                              color: theme.text[\"00\"],\n                              style: {\n                                    textOutline: false\n                              }\n                        }\n                  }\n            },\n            series: [\n                  {\n                        data: [{\n                              name: 'Analytixa',\n                              value: 15,\n                              colorValue: 1\n                        }, {\n                              name: 'Google',\n                              value: 12,\n                              colorValue: 2\n                        }, {\n                              name: 'Apple',\n                              value: 11,\n                              colorValue: 3\n                        }, {\n                              name: 'Amazon',\n                              value: 9,\n                              colorValue: 4\n                        }, {\n                              name: 'Adobe',\n                              value: 9,\n                              colorValue: 5\n                        }, {\n                              name: 'Facebook',\n                              value: 7,\n                              colorValue: 6\n                        }, {\n                              name: 'Microsoft',\n                              value: 5,\n                              colorValue: 7\n                        }, {\n                              name: 'Disney',\n                              value: 4,\n                              colorValue: 4\n                        }, {\n                              name: 'Pixar',\n                              value: 3,\n                              colorValue: 5\n                        }, {\n                              name: 'Goldman Sachs',\n                              value: 2,\n                              colorValue: 6\n                        }, {\n                              name: 'JP Morgan',\n                              value: 1,\n                              colorValue: 7\n                        }]\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Monochromatic Heat Tree Plot\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleTree}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst DualTreeMap = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'treemap',\n                  marginTop: 40,\n                  layoutAlgorithm: 'squarified',\n                  height: theme.isMobile ? \"100%\" : \"45%\"\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  verticalAlign: 'bottom',\n                  symbolWidth: theme.isMobile ? 325 : 1025\n            },\n            colorAxis: {\n                  minColor: \"#FE9677\",\n                  maxColor: theme.chartConfig.colors[1],\n                  marker: {\n                        animation: 200,\n                        width: 7,\n                        color: theme.text[\"00\"]\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        dataLabels: {\n                              enabled: true,\n                              color: theme.text[\"00\"],\n                              style: {\n                                    textOutline: false\n                              }\n                        }\n                  }\n            },\n            series: [\n                  {\n                        data: [{\n                              name: 'Analytixa',\n                              value: 15,\n                              colorValue: 1\n                        }, {\n                              name: 'Google',\n                              value: 12,\n                              colorValue: 2\n                        }, {\n                              name: 'Apple',\n                              value: 11,\n                              colorValue: 3\n                        }, {\n                              name: 'Amazon',\n                              value: 9,\n                              colorValue: 4\n                        }, {\n                              name: 'Adobe',\n                              value: 9,\n                              colorValue: 5\n                        }, {\n                              name: 'Facebook',\n                              value: 7,\n                              colorValue: 6\n                        }, {\n                              name: 'Microsoft',\n                              value: 5,\n                              colorValue: 7\n                        }, {\n                              name: 'Disney',\n                              value: 4,\n                              colorValue: 4\n                        }, {\n                              name: 'Pixar',\n                              value: 3,\n                              colorValue: 5\n                        }, {\n                              name: 'Goldman Sachs',\n                              value: 2,\n                              colorValue: 6\n                        }, {\n                              name: 'JP Morgan',\n                              value: 1,\n                              colorValue: 7\n                        }]\n                  }\n            ],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Dual Heat Tree Plot\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleTree}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst GroupedTreeMap = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'treemap',\n                  marginTop: 40,\n                  type: \"treemap\",\n                  layoutAlgorithm: 'stripes',\n                  alternateStartingDirection: true,\n                  height: theme.isMobile ? \"100%\" : \"45%\"\n            },\n            plotOptions: {\n                  series: {\n                        dataLabels: {\n                              enabled: true,\n                              color: theme.text[\"00\"],\n                              style: {\n                                    textOutline: false\n                              }\n                        }\n                  }\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  verticalAlign: 'bottom',\n                  symbolWidth: theme.isMobile ? 325 : 1025\n            },\n            series: [{\n                  levels: [{\n                        level: 1,\n                        layoutAlgorithm: 'sliceAndDice',\n                        dataLabels: {\n                              enabled: true,\n                              align: 'left',\n                              verticalAlign: 'top',\n                              style: {\n                                    fontSize: '15px',\n                                    fontWeight: 'bold'\n                              }\n                        }\n                  }],\n                  data: [{\n                        id: 'A',\n                        name: 'Apples',\n                        color: theme.chartConfig.colors[0]\n                  }, {\n                        id: 'B',\n                        name: 'Bananas',\n                        color: theme.chartConfig.colors[1]\n                  }, {\n                        id: 'O',\n                        name: 'Oranges',\n                        color: theme.chartConfig.colors[2]\n                  }, {\n                        name: 'Anne',\n                        parent: 'A',\n                        value: 5\n                  }, {\n                        name: 'Rick',\n                        parent: 'A',\n                        value: 3\n                  }, {\n                        name: 'Peter',\n                        parent: 'A',\n                        value: 4\n                  }, {\n                        name: 'Anne',\n                        parent: 'B',\n                        value: 4\n                  }, {\n                        name: 'Rick',\n                        parent: 'B',\n                        value: 10\n                  }, {\n                        name: 'Peter',\n                        parent: 'B',\n                        value: 1\n                  }, {\n                        name: 'Anne',\n                        parent: 'O',\n                        value: 1\n                  }, {\n                        name: 'Rick',\n                        parent: 'O',\n                        value: 3\n                  }, {\n                        name: 'Peter',\n                        parent: 'O',\n                        value: 3\n                  }, {\n                        name: 'Susanne',\n                        parent: 'Kiwi',\n                        value: 2,\n                        color: theme.chartConfig.colors[3]\n                  }]\n            }],\n      }\n      return (\n            <div className={styl.root}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Dual Heat Tree Plot\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperSimpleTree}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchartSolidGauge from 'highcharts/modules/solid-gauge';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartsMore(Highcharts);\nHighchartSolidGauge(Highcharts);\n\nexport const Gauge = () => (\n      <Fragment>\n            <SimpleGaugeChart />\n            <AppleActivityChart />\n            <GradientGaugeChart />\n      </Fragment>\n)\n\nconst SimpleGaugeChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'solidgauge',\n                  height: '100%',\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  borderWidth: 0,\n                  backgroundColor: 'none',\n                  shadow: false,\n                  style: {\n                        fontSize: '16px'\n                  },\n                  valueSuffix: '%',\n                  pointFormat: '<span style=\"color: ' + theme.text[40] + '\"><b>{series.name}</b></span><br><span style=\"font-size:2em; color: {point.color}; font-weight: bold\">{point.y}</span>',\n                  positioner: function (labelWidth) {\n                        return {\n                              x: 205,  //(this.chart.chartWidth - labelWidth) / 2,\n                              y: 200, //(this.chart.plotHeight / 2) + 15\n                        };\n                  }\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n                  background: [{\n                        outerRadius: '112%',\n                        innerRadius: '88%',\n                        backgroundColor: Highcharts.color(theme.chartConfig.colors[0])\n                              .setOpacity(0.3)\n                              .get(),\n                        borderWidth: 0\n                  }, {\n                        outerRadius: '87%',\n                        innerRadius: '63%',\n                        backgroundColor: Highcharts.color(theme.chartConfig.colors[1])\n                              .setOpacity(0.3)\n                              .get(),\n                        borderWidth: 0\n                  }, {\n                        outerRadius: '62%',\n                        innerRadius: '38%',\n                        backgroundColor: Highcharts.color(theme.chartConfig.colors[2])\n                              .setOpacity(0.3)\n                              .get(),\n                        borderWidth: 0\n                  }]\n            },\n            yAxis: {\n                  min: 0,\n                  max: 100,\n                  lineWidth: 0,\n                  tickPositions: []\n            },\n            series: [{\n                  name: 'Move',\n                  data: [{\n                        color: theme.chartConfig.colors[0],\n                        radius: '112%',\n                        innerRadius: '88%',\n                        y: 80\n                  }]\n            }, {\n                  name: 'Exercise',\n                  data: [{\n                        color: theme.chartConfig.colors[1],\n                        radius: '87%',\n                        innerRadius: '63%',\n                        y: 65\n                  }]\n            }, {\n                  name: 'Stand',\n                  data: [{\n                        color: theme.chartConfig.colors[2],\n                        radius: '62%',\n                        innerRadius: '38%',\n                        y: 50\n                  }]\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Gauge\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst GradientGaugeChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'solidgauge',\n                  height: '100%',\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  borderWidth: 0,\n                  backgroundColor: 'none',\n                  shadow: false,\n                  style: {\n                        fontSize: '16px'\n                  },\n                  valueSuffix: '%',\n                  pointFormat: '<span style=\"color: ' + theme.text[40] + '\"><b>{series.name}</b></span><br><span style=\"font-size:2em; color: {point.color}; font-weight: bold\">{point.y}</span>',\n                  positioner: function (labelWidth) {\n                        return {\n                              x: 205,  //(this.chart.chartWidth - labelWidth) / 2,\n                              y: 200, //(this.chart.plotHeight / 2) + 15\n                        };\n                  }\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n                  background: [{\n                        outerRadius: '112%',\n                        innerRadius: '88%',\n                        backgroundColor: Highcharts.color(theme.chartConfig.colors[0])\n                              .setOpacity(0.3)\n                              .get(),\n                        borderWidth: 0\n                  }, {\n                        outerRadius: '87%',\n                        innerRadius: '63%',\n                        backgroundColor: Highcharts.color(theme.chartConfig.colors[1])\n                              .setOpacity(0.3)\n                              .get(),\n                        borderWidth: 0\n                  }, {\n                        outerRadius: '62%',\n                        innerRadius: '38%',\n                        backgroundColor: Highcharts.color(theme.chartConfig.colors[2])\n                              .setOpacity(0.3)\n                              .get(),\n                        borderWidth: 0\n                  }]\n            },\n            yAxis: {\n                  min: 0,\n                  max: 100,\n                  lineWidth: 0,\n                  tickPositions: []\n            },\n            series: [{\n                  name: 'Move',\n                  data: [{\n                        color: {\n                              linearGradient: {\n                                    x1: 0.5,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[0]],\n                                    [1, Highcharts.color(theme.chartConfig.colors[0]).brighten(-0.3).get('rgb')]\n                              ]\n                        },\n                        radius: '112%',\n                        innerRadius: '88%',\n                        y: 80\n                  }]\n            }, {\n                  name: 'Exercise',\n                  data: [{\n                        color: {\n                              linearGradient: {\n                                    x1: 0.5,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[1]],\n                                    [1, Highcharts.color(theme.chartConfig.colors[1]).brighten(-0.3).get('rgb')]\n                              ]\n                        },\n                        radius: '87%',\n                        innerRadius: '63%',\n                        y: 65\n                  }]\n            }, {\n                  name: 'Stand',\n                  data: [{\n                        color: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, theme.chartConfig.colors[2]],\n                                    [1, Highcharts.color(theme.chartConfig.colors[2]).brighten(-0.3).get('rgb')]\n                              ]\n                        },\n                        radius: '62%',\n                        innerRadius: '38%',\n                        y: 50\n                  }]\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}  ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Gradient Gauge\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst AppleActivityChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'solidgauge',\n                  height: '100%',\n            },\n            subtitle: {\n                  text: `${theme.theme === \"light\" ? \"*Switch to dark theme, for more accurate expeirence (toggle on top right)\" : \"\"}`\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  startOnTick: true,\n                  endOnTick: true,\n                  showLastLabel: true,\n            },\n            tooltip: {\n                  borderWidth: 0,\n                  backgroundColor: 'none',\n                  shadow: false,\n                  style: {\n                        fontSize: '16px'\n                  },\n                  valueSuffix: '%',\n                  pointFormat: '<span style=\"color: ' + theme.text[40] + '\"><b>{series.name}</b></span><br><span style=\"font-size:2em; color: {point.color}; font-weight: bold\">{point.y}</span>',\n                  positioner: function (labelWidth) {\n                        return {\n                              x: 205,  //(this.chart.chartWidth - labelWidth) / 2,\n                              y: 200, //(this.chart.plotHeight / 2) + 15\n                        };\n                  }\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n                  background: [{\n                        outerRadius: '112%',\n                        innerRadius: '88%',\n                        backgroundColor: \"#F9398620\",\n                        borderWidth: 0\n                  }, {\n                        outerRadius: '87%',\n                        innerRadius: '63%',\n                        backgroundColor: \"#D7FF0020\",\n                        borderWidth: 0\n                  }, {\n                        outerRadius: '62%',\n                        innerRadius: '38%',\n                        backgroundColor: \"#00FFA720\",\n                        borderWidth: 0\n                  }]\n            },\n            yAxis: {\n                  min: 0,\n                  max: 100,\n                  lineWidth: 0,\n                  tickPositions: []\n            },\n            series: [{\n                  name: 'Move',\n                  data: [{\n                        color: {\n                              linearGradient: {\n                                    x1: 0.5,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, \"#FA1150\"],\n                                    [1, \"#F93986\"]\n                              ]\n                        },\n                        radius: '112%',\n                        innerRadius: '88%',\n                        y: 80\n                  }]\n            }, {\n                  name: 'Exercise',\n                  data: [{\n                        color: {\n                              linearGradient: {\n                                    x1: 0.5,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, \"#9AFE00\"],\n                                    [1, \"#D7FF00\"]\n                              ]\n                        },\n                        radius: '87%',\n                        innerRadius: '63%',\n                        y: 65\n                  }]\n            }, {\n                  name: 'Stand',\n                  data: [{\n                        color: {\n                              linearGradient: {\n                                    x1: 0,\n                                    y1: 0,\n                                    x2: 0,\n                                    y2: 1\n                              },\n                              stops: [\n                                    [0, \"#00DEFD\"],\n                                    [1, \"#00FFA7\"]\n                              ]\n                        },\n                        radius: '62%',\n                        innerRadius: '38%',\n                        y: 50\n                  }]\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Apple Activity Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperPieChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchartSolidGauge from 'highcharts/modules/solid-gauge';\nimport { Styles } from '../../../styles/Designs/Lines';\n\nHighchartsMore(Highcharts);\nHighchartSolidGauge(Highcharts);\n\nexport const Radar = () => (\n      <Fragment>\n            <SimpleRadarChart />\n            <MultiRadarChart />\n            <SimplePolarChart />\n            <MultiPolarChart />\n            <RadialBarChart />\n      </Fragment>\n)\n\nconst SimpleRadarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  polar: true,\n                  height: \"100%\"\n            },\n            xAxis: {\n                  tickInterval: 45,\n                  min: 0,\n                  max: 360,\n                  labels: {\n                        format: '{value}Â°'\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        pointStart: 0,\n                        pointInterval: 45\n                  },\n                  column: {\n                        pointPadding: 0,\n                        groupPadding: 0\n                  }\n            },\n            yAxis: {\n                  min: 0\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n            },\n            series: [{\n                  name: \"Analytixa\",\n                  data: [8, 7, 6, 5, 4, 3, 2, 1],\n                  pointPlacement: 'between'\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Radar Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperRadarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MultiRadarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  polar: true,\n                  height: \"100%\"\n            },\n            xAxis: {\n                  tickInterval: 45,\n                  min: 0,\n                  max: 360,\n                  labels: {\n                        format: '{value}Â°'\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        pointStart: 0,\n                        pointInterval: 45\n                  },\n                  column: {\n                        pointPadding: 0,\n                        groupPadding: 0\n                  }\n            },\n            yAxis: {\n                  min: 0\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n            },\n            series: [{\n                  name: \"Analytixa\",\n                  data: [8, 7, 6, 5, 4, 3, 2, 1],\n                  pointPlacement: 'between'\n            }, {\n                  name: \"Google\",\n                  data: [1, 2, 3, 4, 5, 6, 7, 8]\n            }, {\n                  name: \"Amazon\",\n                  data: [1, 8, 2, 7, 3, 6, 4, 5]\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Multi Radar Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperRadarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst SimplePolarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  polar: true,\n                  height: \"100%\"\n            },\n            xAxis: {\n                  tickInterval: 45,\n                  min: 0,\n                  max: 360,\n                  labels: {\n                        format: '{value}Â°'\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        pointStart: 0,\n                        pointInterval: 45\n                  },\n                  column: {\n                        pointPadding: 0,\n                        groupPadding: 0\n                  }\n            },\n            yAxis: {\n                  min: 0\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n            },\n            series: [{\n                  type: \"column\",\n                  name: \"Analytixa\",\n                  data: [8, 7, 6, 5, 4, 3, 2, 1],\n                  pointPlacement: 'between'\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Simple Polar Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperRadarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst RadialBarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  polar: true,\n                  type: 'column',\n                  inverted: true,\n                  height: \"100%\"\n            },\n            xAxis: {\n                  tickInterval: 1,\n                  labels: {\n                        align: 'right',\n                        useHTML: true,\n                        allowOverlap: true,\n                        step: 1,\n                        y: 4,\n                        style: {\n                              fontSize: '12px'\n                        }\n                  },\n                  lineWidth: 0,\n                  categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            },\n            plotOptions: {\n                  column: {\n                        stacking: 'normal',\n                        borderWidth: 0,\n                        pointPadding: 0,\n                        groupPadding: 0.15\n                  }\n            },\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  outside: true\n            },\n            yAxis: {\n                  lineWidth: 0,\n                  tickInterval: 25,\n                  reversedStacks: false,\n                  endOnTick: true,\n                  showLastLabel: true\n            },\n            pane: {\n                  size: '85%',\n                  endAngle: 270\n            },\n            series: [{\n                  name: \"Analytixa\",\n                  data: [132, 105, 92, 73, 64, 57, 55, 47, 45, 43],\n            }, {\n                  name: \"Google\",\n                  data: [125, 110, 86, 64, 81, 46, 46, 38, 44, 63]\n            }, {\n                  name: \"Amazon\",\n                  data: [111, 90, 60, 62, 87, 55, 52, 35, 41, 61]\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned} ${styl.verticalAlignedFirst}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Polar Stack Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperRadarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nconst MultiPolarChart = () => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  polar: true,\n                  height: \"100%\"\n            },\n            xAxis: {\n                  tickInterval: 45,\n                  min: 0,\n                  max: 360,\n                  labels: {\n                        format: '{value}Â°'\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        pointStart: 0,\n                        pointInterval: 45\n                  },\n                  column: {\n                        pointPadding: 0,\n                        groupPadding: 0\n                  }\n            },\n            yAxis: {\n                  min: 0\n            },\n            pane: {\n                  startAngle: 0,\n                  endAngle: 360,\n            },\n            series: [{\n                  type: \"column\",\n                  name: \"Analytixa\",\n                  data: [8, 7, 6, 5, 4, 3, 2, 1],\n                  pointPlacement: 'between'\n            }, {\n                  type: \"column\",\n                  name: \"Google\",\n                  data: [1, 2, 3, 4, 5, 6, 7, 8]\n            }, {\n                  type: \"column\",\n                  name: \"Amazon\",\n                  data: [1, 8, 2, 7, 3, 6, 4, 5]\n            }],\n      }\n      return (\n            <div className={`${styl.root} ${styl.verticalAligned}`}>\n                  <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                        Multi Polar Chart\n                        </Typography>\n                  <Paper elevation={0} className={styl.paperRadarChart}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}","import { makeStyles, fade } from \"@material-ui/core/styles\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            \n      },\n      states: {\n            outline: \"none\",\n            zIndex: 1,\n            cursor: \"pointer\",\n            transition: \"fill 0.3s ease\",\n            strokeWidth: 1,\n            strokeLinecap: \"round\",\n            stroke: fade(theme.background[10], 0.25)\n      },\n      grayStates: {\n            outline: \"none\",\n            zIndex: 1,\n            cursor: \"pointer\",\n            transition: \"fill 0.3s ease\",\n            strokeWidth: 1,\n            strokeLinecap: \"round\",\n            fill: fade(theme.background[30], 0.3)\n      },\n      toggleContainer: {\n\n      },\n      paperWorldMap: {\n            height: \"55vh\",\n            backgroundColor: theme.background[\"00\"],\n            borderRadius: 10,\n\n            \"& svg\": {\n                  marginTop: 25,\n                  transform: \"scale(1.4)\",\n            },\n\n            \"& .__react_component_tooltip\": {\n                  color: \"#FFF\",\n                  padding: \"4px 8px\",\n                  fontSize: \"11px\",\n                  lineHeight: \"1.4em\",\n                  borderRadius: 5,\n                  backgroundColor: theme.palette.secondary.main\n            },\n            \"& .__react_component_tooltip.type-dark.place-top:after\": {\n                  borderTopColor: theme.palette.secondary.main\n            }\n      }\n}))","import { makeStyles, fade } from \"@material-ui/core/styles\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            justifyContent: \"center\",\n            display: \"flex\"\n      },\n      labels: {\n            color: theme.text[40],\n            display: \"inline-flex\",\n            alignItems: \"center\"\n      },\n      toggleButtonGroup: {\n            backgroundColor: \"transparent\",\n            margin: 20,\n\n            \"& button\": {\n                  padding: \"0px 15px\",\n                  height: 32,\n                  fontSize: theme.typography.body1.fontSize,\n                  backgroundColor: fade(theme.background[\"00\"], 0.5),\n                  color: theme.text[70],\n                  border: `solid 1px ${fade(theme.text[50], 0.25)}`,\n                  boderLeft: `solid 1px ${fade(theme.text[50], 0.25)}`,\n                  borderRight: `solid 1px ${fade(theme.text[50], 0.25)}`,\n                  textTransform: \"capitalize\",\n            },\n            \"& .Mui-selected\": {\n                  backgroundColor: theme.background[\"00\"],\n                  color: theme.palette.primary.main,\n            },\n            \"& .MuiToggleButton-root:hover\": {\n                  backgroundColor: theme.background[\"00\"],\n            }\n      },\n      toggleContainer: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            \"& button\": {\n                  padding: \"0px 15px\",\n                  height: 32,\n                  fontSize: theme.typography.body1.fontSize,\n                  backgroundColor: fade(theme.text[70], 0.3),\n                  color: theme.text[50],\n                  border: `solid 1px ${fade(theme.text[50], 0.25)}`,\n                  boderLeft: `solid 1px ${fade(theme.text[50], 0.25)}`,\n                  borderRight: `solid 1px ${fade(theme.text[50], 0.25)}`,\n                  textTransform: \"capitalize\",\n            },\n            \"& .Mui-selected\": {\n                  backgroundColor: fade(theme.background[\"00\"], 0.5),\n                  color: theme.palette.primary.main,\n            },\n            \"& .MuiToggleButton-root:hover\": {\n                  backgroundColor: fade(theme.text[90], 0.2),\n            }\n      },\n      Æ’ilterContainer: {\n            backgroundColor: \"transparent\",\n            display: \"flex\",\n            height: 75,\n            justifyContent: \"center\",\n            borderRadius: 0,\n            borderTopRightRadius: 10,\n            borderTopLeftRadius: 10,\n            alignItems: \"center\",\n\n            \"& button\": {\n                  backgroundColor: theme.background[40],\n                  color: theme.text[50]\n            }\n      },\n      transparent: {\n            background: \"transparent\",\n            border: \"transparent\",\n            justifyContent: \"flex-end\",\n      },\n      btnFilterBy: {\n            padding: \"0 5px\",\n            textTransform: \"capitalize\",\n            color: theme.palette.primary.main,\n            backgroundColor: fade(theme.background[\"00\"], 0.9),\n            border: `solid 1px ${fade(theme.text[50], 0.25)}`,\n            \"& svg\": {\n                  fontSize: 18\n            }\n      },\n      countrySelectionContainer: {\n            backgroundColor: \"transparent\",\n            display: \"flex\",\n            height: 75,\n            justifyContent: \"flex-end\",\n            borderRadius: 0,\n            borderTopRightRadius: 10,\n            borderTopLeftRadius: 10,\n            alignItems: \"center\"\n      },\n      btnCountrySelection: {\n            padding: \"0 15px\",\n            textTransform: \"capitalize\",\n            color: theme.palette.primary.main,\n            backgroundColor: fade(theme.background[\"00\"], 0.9),\n            border: `solid 1px ${fade(theme.text[50], 0.25)}`,\n            fontSize: theme.typography.body1.fontSize,\n            height: 32,\n            margin: 20,\n\n            \"&:hover\": {\n                  backgroundColor: theme.background[\"00\"],\n            },\n\n            \"& svg\": {\n                  fontSize: 18\n            }\n      },\n      btnYear: {\n            padding: \"0 5px 0 10px\",\n            textTransform: \"capitalize\",\n            color: theme.palette.primary.main,\n            backgroundColor: fade(theme.background[\"00\"], 0.9),\n            border: `solid 1px ${fade(theme.text[50], 0.25)}`,\n            \"& svg\": {\n                  fontSize: 18\n            }\n      },\n      divider: {\n            alignSelf: 'stretch',\n            background: theme.text[70]\n      },\n      popover_Paper: {\n            backgroundColor: theme.background[\"00\"],\n            color: theme.text[30],\n            height: 500\n      },\n      gridContainer: {\n            justifyContent: \"space-between\",\n            flexDirection: \"column\",\n            display: \"inline-flex\",\n            margin: 10\n      },\n      mapContainer: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            borderRadius: 10,\n            backgroundColor: theme.background[30],\n      },\n      mapFiterContainer: {\n            display: \"inline-flex\",\n            justifyContent: \"space-between\",\n            zIndex: 10,\n      },\n      title: {\n            padding: \"5px 25px\",\n            color: theme.text[20],\n            fontWeight: 400,\n            fontSize: 18,\n            alignItems: \"center\",\n            display: \"inline-flex\"\n      },\n      // Top Bottom\n      topAndBottomContainer: {\n            width: \"35vw\",\n            height: \"64vh\",\n            display: \"inline-flex\",\n            flexDirection: \"column\",\n            backgroundColor: theme.background[30],\n            flexDirection: \"column\",\n            margin: 10,\n            borderRadius: 10,\n      },\n      topSelection: {},\n      bottomSelection: {},\n      verticalBarChart: {\n            backgroundColor: \"transparent\",\n            marginTop: 0,\n\n            \"& div.highcharts-container\": {\n                  marginTop: theme.isMobile ? 0 : -10,\n                  transform: \"translateX(-10px)\"\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg path.highcharts-crosshair\": {\n                  stroke: fade(theme.palette.primary.main, 0.075),\n            }\n      },\n      paperContrastAreaSpline: {\n            width: \"100%\",\n            padding: 10,\n            borderRadius: 10,\n            backgroundColor: fade(theme.palette.primary.main, 0.75),\n\n            \"& div.highcharts-container\": {\n                  marginTop: -10,\n            },\n\n            \"& div.highcharts-container svg .highcharts-background\": {\n                  fill: \"transparent\",\n            },\n\n            \"& div.highcharts-container svg .highcharts-grid-line\": {\n                  stroke: \"transparent\"\n            },\n      },\n      dataLabels: {\n\n      }\n}))","import React, { useEffect, useState, Fragment } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport ReactTooltip from \"react-tooltip\";\nimport worldMapJSON from \"../../../assets/CSV/worldMap.json\";\nimport {\n      ComposableMap,\n      Geographies,\n      Geography,\n      Sphere,\n      Graticule\n} from \"react-simple-maps\";\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport { createStore, StoreManager } from \"@rootzjs/store\";\nimport { Styles } from '../../../styles/Designs/WorldMap';\n\n\nconst geoUrl =\n      \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n\nconst MapComponent = ({\n      props,\n      state\n}) => {\n      const styl = Styles();\n      const theme = useTheme();\n      const colorScaleMono = scaleLinear()\n            .domain([0.29, 0.68])\n            .range([\"#ffe8e5\", theme.palette.primary.main]);\n      const colorScaleBi = scaleLinear()\n            .domain([0.29, 0.68])\n            .range([\"#ffe392\", \"#0f9318\"]);\n      const colorScaleHeat = scaleLinear()\n            .domain([0.29, 0.33, 0.376, 0.419, 0.462, 0.505, 0.548, 0.591, 0.634, 0.68])\n            .range([\n                  \"#171789\",\n                  \"#4a1b9d\",\n                  \"#7020a4\",\n                  \"#93249c\",\n                  \"#bc397e\",\n                  \"#d0526b\",\n                  \"#e57251\",\n                  \"#f59a39\",\n                  \"#f6bd26\",\n                  \"#eaef1f\"\n            ]);\n\n      return (\n            <div className={styl.root}>\n                  {\n                        props.title !== \"\" &&\n                        <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                              {props.title}\n                        </Typography>\n                  }\n                  <Paper elevation={0} className={styl.paperWorldMap}>\n                        <ComposableMap\n                              data-tip=\"\"\n                              projection=\"geoMercator\"\n                              projectionConfig={{\n                                    rotate: [-10, 0, 0],\n                                    scale: 170\n                              }}\n                        >\n                              {/* <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                   <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} /> */}\n                              {state.data.length > 0 && (\n                                    <Geographies geography={geoUrl}>\n                                          {({ geographies }) =>\n                                                geographies.map(geo => {\n                                                      const d = state.data.find(s => s.ISO3 === geo.properties.ISO_A3);\n                                                      if (geo.properties.ISO_A3 === \"ATA\" || geo.properties.ISO_A3 === \"GRL\") return [];\n                                                      return (\n                                                            <Geography\n                                                                  id={geo.properties.ISO_A3}\n                                                                  key={geo.rsmKey}\n                                                                  geography={geo}\n                                                                  className={styl.states}\n                                                                  onMouseEnter={() => {\n                                                                        const { NAME, POP_EST } = geo.properties;\n                                                                        StoreManager.update(\"#MapComponent\", {\n                                                                              content: `${NAME}`\n                                                                        })\n                                                                  }}\n                                                                  onMouseLeave={() => {\n                                                                        StoreManager.update(\"#MapComponent\", {\n                                                                              content: \"\"\n                                                                        })\n                                                                  }}\n                                                                  style={{\n                                                                        default: props.type === \"SIMPLE\"\n                                                                              ?\n                                                                              {\n                                                                                    stroke: theme.text[60],\n                                                                              } : {\n                                                                                    stroke: \"\"\n                                                                              },\n                                                                        hover: props.type === \"SIMPLE\"\n                                                                              ?\n                                                                              {\n                                                                                    fill: fade(theme.palette.primary.main, 0.8),\n                                                                                    stroke: theme.text[60],\n                                                                              } : {\n                                                                                    fill: \"\"\n                                                                              }\n                                                                  }}\n                                                                  fill={\n                                                                        props.type === \"SIMPLE\" ? theme.background[20]\n                                                                              :\n                                                                              props.type === \"MONO_CHOROPLETH\" ? (d ? colorScaleMono(d[\"2017\"]) : fade(theme.text[30], 0.1))\n                                                                                    :\n                                                                                    props.type === \"BI_CHOROPLETH\" ? (d ? colorScaleBi(d[\"2017\"]) : fade(theme.text[30], 0.1))\n                                                                                          :\n                                                                                          props.type === \"HEAT_CHOROPLETH\" ? (d ? colorScaleHeat(d[\"2017\"]) : fade(theme.text[30], 0.1))\n                                                                                                :\n                                                                                                (d ? colorScaleMono(d[\"2017\"]) : fade(theme.text[30], 0.1))\n                                                                  }\n                                                            />\n                                                      );\n                                                })\n                                          }\n                                    </Geographies>\n                              )}\n                        </ComposableMap>\n                        <ReactTooltip>{state.content}</ReactTooltip>\n                  </Paper>\n            </div>\n      )\n}\n\nexport const Maps = createStore({\n      storeID: \"#MapComponent\",\n      Component: MapComponent,\n      state: {\n            content: \"\",\n            data: worldMapJSON,\n      }\n});\n\nexport const WorldMap = () => (\n      <Fragment>\n            <Maps type=\"SIMPLE\" title=\"Simple World Map\" />\n            <Maps type=\"MONO_CHOROPLETH\" title=\"World Monochromatic Choropleth Map\" />\n            <Maps type=\"BI_CHOROPLETH\" title=\"World Bichromatic Choropleth Map\" />\n            <Maps type=\"HEAT_CHOROPLETH\" title=\"World Heat Choropleth Map\" />\n      </Fragment>\n)\n// export const WorldMap = () => (\n//       <Fragment>\n//             <MapComponent props={{ type= \"MONO_CHOROPLETH\", title: \"Simple World Map\" }} state={{ content: \"\", data: worldMapJSON }} />\n//             <MapComponent props={{ type= \"BI_CHOROPLETH\", title: \"World Choropleth Map\" }} state={{ content: \"\", data: worldMapJSON }} />\n//             <MapComponent props={{ type= \"HEAT_CHOROPLETH\", title: \"Simple World Map2\" }} state={{ content: \"\", data: worldMapJSON }} />\n//       </Fragment>\n// )\n\n\n","import React from 'react';\nimport {\n      Grid,\n      Typography,\n      ToggleButtonGroup,\n      ToggleButton,\n      Paper,\n      Button,\n      Menu,\n      MenuItem,\n      Divider,\n      ExpandMoreRounded\n} from '../../Core';\nimport { createStore, StoreManager } from '@rootzjs/store';\nimport { SelectButton } from '../../Toolkit/Selects';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\n\nconst yearsItem = [\"All\", \"Populated\", \"Most Populated\", \"Less Populated\", \"Least Populated\"];\nexport const Filter = createStore({\n      storeID: \"#Filter\",\n      Component: ({ state }) => {\n            const styl = Styles();\n            const onFilterChange = (evt, filterBy) => {\n                  if(!filterBy) return;\n                  StoreManager.update(\"#Filter\", {\n                        filterBy\n                  })\n                  StoreManager.update(\"#TopBottomFilter\", {\n                        filterBy\n                  })\n                  StoreManager.update(\"#MapInsights\", {\n                        filterBy\n                  })\n            }\n            return (\n                  <Grid item sm={6} md={8} style={{ padding: 0 }}>\n                        <Paper elevation={0} className={`${styl.Æ’ilterContainer} ${styl.transparent}`}>\n                              <ToggleButtonGroup\n                                    className={styl.toggleButtonGroup}\n                                    value={state.filterBy}\n                                    exclusive\n                                    onChange={onFilterChange}\n                                    aria-label=\"text alignment\"\n                              >\n                                    <ToggleButton value=\"Population\" aria-label=\"left aligned\">Population\n                                    </ToggleButton>\n                                    <ToggleButton value=\"GDP\" aria-label=\"centered\">GDP\n                                    </ToggleButton>\n                                    <ToggleButton value=\"GDP per Capita\" aria-label=\"centered\">GDP per Capita\n                                    </ToggleButton>\n                              </ToggleButtonGroup>\n                        </Paper>\n                  </Grid>\n            )\n      },\n      state: {\n            filterBy: \"Population\",\n      }\n})","import React from 'react';\nimport {\n      Grid,\n      Typography,\n      ToggleButtonGroup,\n      ToggleButton,\n      Divider,\n      Paper,\n      Button,\n      Menu,\n      MenuItem,\n      ExpandMoreRounded,\n      PaletteRounded,\n      useTheme,\n      fade\n} from '../../Core';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\n\n\nconst MonoColorArr = () => {\n      const styl = Styles();\n      return (\n            <div className={styl.paletteContainer}>\n                  {[\"#fcc1bc\", \"#fbaea8\", \"#faa099\", \"#f9938b\", \"#f88077\", \"#f77369\", \"#f66056\", \"#f54f43\", \"#f4473a\", \"#F44336\"].map(x => (\n                        <span className={styl.paletteColors} style={{ backgroundColor: x }}></span>\n                  ))}\n            </div>\n      )\n}\nconst GrayColorArr = () => {\n      const styl = Styles();\n      return (\n            <div className={styl.paletteContainer}>\n                  {[\"#F2F2F2E0\", \"#E2E2E2E0\", \"#CCCCCCE0\", \"#AAAAAAE0\", \"#888888E0\", \"#777777E0\", \"#555555E0\", \"#444444E0\", \"#333333E0\", \"#222222E0\"].map(x => (\n                        <span className={styl.paletteColors} style={{ backgroundColor: x }}></span>\n                  ))}\n            </div>\n      )\n}\nconst BiColorArr = () => {\n      const styl = Styles();\n      return (<div className={styl.paletteContainer}>\n            {[\"#fae290\", \"#e4da84\", \"#d0d37a\", \"#b4ca6b\", \"#9fc361\", \"#96c05d\", \"#83ba53\", \"#73b44b\", \"#48a634\", \"#15951b\"].map(x => (\n                  <span className={styl.paletteColors} style={{ backgroundColor: x }}></span>\n            ))}\n      </div>\n      )\n}\nconst HeatColorArr = () => {\n      const styl = Styles();\n      return (<div className={styl.paletteContainer}>\n            {[\n                  \"#171789\",\n                  \"#4a1b9d\",\n                  \"#7020a4\",\n                  \"#93249c\",\n                  \"#bc397e\",\n                  \"#d0526b\",\n                  \"#e57251\",\n                  \"#f59a39\",\n                  \"#f6bd26\",\n                  \"#eaef1f\"\n            ].map(x => (\n                  <span className={styl.paletteColors} style={{ backgroundColor: x }}></span>\n            ))}\n      </div>\n      )\n}\nexport const Theme = createStore({\n      storeID: \"#Theme\",\n      Component: ({ state }) => {\n            const styl = Styles();\n            const theme = useTheme();\n\n            const onClose = evt => {\n                  StoreManager.update(\"#Theme\", {\n                        anchor: null\n                  })\n            }\n            const onClick = evt => {\n                  StoreManager.update(\"#Theme\", {\n                        anchor: evt.currentTarget\n                  })\n            }\n            const onFilterSelect = (ColorArray, type) => {\n                  StoreManager.update(\"#Theme\", {\n                        filterBy: <ColorArray />,\n                        anchor: null\n                  })\n                  StoreManager.update(\"#Dashboard\", {\n                        type\n                  })\n            }\n            return (\n                  <Grid item sm={6} md={3} style={{ padding: 0 }}>\n                        <Paper elevation={0} className={styl.Æ’ilterContainer}>\n                              <Button className={styl.btnFilterBy} onClick={onClick}>\n                                    {state.filterBy}\n                                    <ExpandMoreRounded />\n                              </Button>\n                              <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={state.anchor}\n                                    keepMounted\n                                    open={Boolean(state.anchor)}\n                                    onClose={onClose}\n                                    PopoverClasses={{\n                                          paper: styl.popover_Paper\n                                    }}\n                              >\n                                    <MenuItem onClick={() => onFilterSelect(MonoColorArr, \"GRAY_CHOROPLETH\")} >\n                                          <GrayColorArr />\n                                    </MenuItem>\n                                    <MenuItem onClick={() => onFilterSelect(MonoColorArr, \"MONO_CHOROPLETH\")} >\n                                          <MonoColorArr />\n                                    </MenuItem>\n                                    <MenuItem onClick={() => onFilterSelect(BiColorArr, \"BI_CHOROPLETH\")}>\n                                          <BiColorArr />\n                                    </MenuItem>\n                                    <MenuItem onClick={() => onFilterSelect(HeatColorArr, \"HEAT_CHOROPLETH\")}>\n                                          <HeatColorArr />\n                                    </MenuItem>\n                              </Menu>\n                        </Paper>\n                  </Grid>\n            )\n      },\n      state: {\n            anchor: null,\n            filterBy: <MonoColorArr />\n      }\n})","import React from 'react';\nimport {\n      Grid,\n      Typography,\n      ToggleButtonGroup,\n      ToggleButton,\n      Paper,\n      Button,\n      Menu,\n      MenuItem\n} from '../../Core';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\n\nexport const Region = createStore({\n      storeID: \"#Region\",\n      Component: ({ state }) => {\n            const styl = Styles();\n            const onRegionChange = (evt, region) => {\n                  if(!region) return;\n                  StoreManager.update(\"#Region\", { region })\n            }\n            return (\n                  <Grid item sm={6} md={4} style={{ padding: 0 }}>\n                        <div className={styl.toggleContainer}>\n                              <ToggleButtonGroup\n                                    className={styl.toggleButtonGroup}\n                                    value={state.region}\n                                    exclusive\n                                    onChange={onRegionChange}\n                                    aria-label=\"text alignment\"\n                              >\n                                    <ToggleButton value=\"World\" aria-label=\"left aligned\">World\n                                                </ToggleButton>\n                                    <ToggleButton value=\"India\" aria-label=\"centered\">India\n                                                </ToggleButton>\n                                    <ToggleButton value=\"USA\" aria-label=\"right aligned\">USA\n                                                </ToggleButton>\n                              </ToggleButtonGroup>\n                        </div>\n                  </Grid>\n            )\n      },\n      state: {\n            region: \"World\"\n      }\n})","import React, { useEffect } from 'react';\nimport {\n      Grid,\n      Typography,\n      ToggleButtonGroup,\n      ToggleButton,\n      Paper,\n      Button,\n      Menu,\n      MenuItem,\n      Divider,\n      useTheme,\n      ExpandMoreRounded,\n      fade\n} from '../../Core';\nimport { createStore, StoreManager } from '@rootzjs/store';\nimport { SelectButton } from '../../Toolkit/Selects';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchartsRoundedCorners from 'yarn-highcharts-rounded-corners';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\n\nconst filterMapping = {\n      \"Population\": \"POP_EST\",\n      \"GDP\": \"GDP_MD_EST\",\n      \"GDP per Capita\": \"GDP_MD_EST\"\n}\nconst rounded = (num, isSmall) => {\n      if (!isSmall) {\n            if (num > 1000000000) {\n                  return Math.round(num / 100000000) / 10 + \"Bn\";\n            } else if (num > 1000000) {\n                  return Math.round(num / 100000) / 10 + \"M\";\n            } else {\n                  return Math.round(num / 100) / 10 + \"K\";\n            }\n      } else {\n            return (num * 100).toFixed(2);\n      }\n};\nHighchartsRoundedCorners(Highcharts);\nHighchartsMore(Highcharts);\nconst VerticalBarChart = ({ categories, data }) => {\n      const styl = Styles();\n      const theme = useTheme();\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: \"bar\",\n                  inverted: true,\n                  height: theme.isMobile ? \"480px\" : \"470px\",\n            },\n            colors: [\"#7c96f7\"],\n            xAxis: {\n                  visible: true,\n                  opposite: true,\n                  lineWidth: 0,\n                  categories,\n                  labels: {\n                        style: {\n                              color: theme.text[40],\n                              fontSize: \"12px\",\n                              fontWeight: \"normal\",\n                              textOutline: \"none\",\n                              textAnchor: \"end\",\n                              \n                        },\n                        reserveSpace: true,\n                        align: \"right\",\n                        x: 0,\n                        y: 2\n                  },\n            },\n            yAxis: {\n                  visible: false,\n                  min: 0,\n            },\n            legend: {\n                  enabled: false\n            },\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  formatter: function () {\n                        return `<span> ${this.x} <span style=\"font-weight: bold\">: ${rounded(this.y, false)}</span></span>`;\n                  }\n            },\n            plotOptions: {\n                  series: {\n                        pointWidth: 20,\n                        pointPadding: 0,\n                        groupPadding: 0,\n                        borderWidth: 0,\n                  },\n            },\n            series: [\n                  {\n                        name: \"Analytixa\",\n                        data,\n                        marker: {\n                              enabled: false\n                        },\n                  }\n            ],\n      }\n      return (\n            <Paper elevation={0} className={styl.verticalBarChart}>\n                  <HighchartsReact\n                        highcharts={Highcharts}\n                        options={chartConfig}>\n                  </HighchartsReact>\n            </Paper>\n      )\n}\n\nexport const TopBottomFilter = createStore({\n      storeID: \"#TopBottomFilter\",\n      Component: ({ state }) => {\n            let topRegions;\n            let bottomRegions;\n            let topRegionsData;\n            let bottomRegionsData;\n            const styl = Styles();\n            const onFilterChange = (evt, topBottomBy) => {\n                  if (!topBottomBy) return;\n                  StoreManager.update(\"#TopBottomFilter\", {\n                        topBottomBy\n                  })\n                  StoreManager.update(\"#Dashboard\", {\n                        topBottomBy\n                  })\n            }\n            const appProfile = StoreManager.getProfile();\n            if (appProfile.hasOwnProperty(\"geoData\")) {\n                  if (state.filterBy !== \"GDP per Capita\") {\n                        const sortedRegions = appProfile.geoData.sort((a, b) => a[filterMapping[state.filterBy]] - b[filterMapping[state.filterBy]]);\n                        bottomRegions = sortedRegions.slice(4, 24);\n                        topRegions = sortedRegions.slice(sortedRegions.length - 20, sortedRegions.length)\n                        bottomRegionsData = bottomRegions.map(x => x[filterMapping[state.filterBy]])\n                        topRegionsData = topRegions.map(x => x[filterMapping[state.filterBy]]).reverse();\n                        bottomRegions = bottomRegions.map(x => x.NAME);\n                        topRegions = topRegions.map(x => x.NAME).reverse();\n                  } else {\n                        const sortedRegions = appProfile.geoData.sort((a, b) => (a[filterMapping[\"GDP\"]] / a[filterMapping[\"Population\"]]) - (b[filterMapping[\"GDP\"]] / b[filterMapping[\"Population\"]]));\n                        bottomRegions = sortedRegions.slice(4, 24);\n                        topRegions = sortedRegions.slice(sortedRegions.length - 20, sortedRegions.length)\n                        bottomRegionsData = bottomRegions.map(x => (x[filterMapping[\"GDP\"]] / x[filterMapping[\"Population\"]]))\n                        topRegionsData = topRegions.map(x => (x[filterMapping[\"GDP\"]] / x[filterMapping[\"Population\"]])).reverse();\n                        bottomRegions = bottomRegions.map(x => x.NAME);\n                        topRegions = topRegions.map(x => x.NAME).reverse();\n                  }\n            }\n            return (\n                  <Grid item sm={8} md={12} style={{ padding: 0 }}>\n                        <Paper elevation={0} className={styl.Æ’ilterContainer}>\n                              <ToggleButtonGroup\n                                    className={styl.toggleButtonGroup}\n                                    value={state.topBottomBy}\n                                    exclusive\n                                    onChange={onFilterChange}\n                                    aria-label=\"text alignment\"\n                              >\n                                    <ToggleButton value=\"Top 20 Regions\" aria-label=\"left aligned\">Top 20 Regions\n                                    </ToggleButton>\n                                    <ToggleButton value=\"Bottom 20 Regions\" aria-label=\"centered\">Bottom 20 Regions\n                                    </ToggleButton>\n                              </ToggleButtonGroup>\n                        </Paper>\n                        {\n                              appProfile.hasOwnProperty(\"geoData\") &&\n                              <VerticalBarChart\n                                    categories={state.topBottomBy === \"Top 20 Regions\" ? topRegions : bottomRegions}\n                                    data={state.topBottomBy === \"Top 20 Regions\" ? topRegionsData : bottomRegionsData}\n                              />\n                        }\n                  </Grid>\n            )\n      },\n      state: {\n            topBottomBy: \"Top 20 Regions\",\n      },\n      mapAllPropsToState: true\n})","import React, { Fragment } from 'react';\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport HighchatrsSteamGraph from 'highcharts/modules/streamgraph';\nimport HighchartsPatternFill from 'highcharts/modules/pattern-fill';\nimport MapData from '../../../assets/CSV/worldMap.json';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\n\nHighchartsMore(Highcharts);\nHighchartsPatternFill(Highcharts);\nHighchatrsSteamGraph(Highcharts)\n\nconst categories = ['1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'];\n\nconst Population = ({\n      state\n}) => {\n      const styl = Styles();\n      const theme = useTheme();\n      debugger;\n      const filteredMapData = MapData.find(x => x.Name === state.country);\n      const data = categories.map(x => filteredMapData[x]);\n      const chartConfig = {\n            ...theme.chartConfig,\n            chart: {\n                  ...theme.chartConfig.chart,\n                  type: 'areaspline'\n            },\n            colors: [\"#FFFFFF80\", \"#FFFFFF\"],\n            plotOptions: {\n                  ...theme.chartConfig.plotOptions,\n                  series: {\n                        ...theme.chartConfig.plotOptions.series,\n                        marker: {\n                              ...theme.chartConfig.plotOptions.series.marker,\n                              lineWidth: 0,\n                              radius: 5\n                        },\n                  }\n            },\n            xAxis: {\n                  ...theme.chartConfig.xAxis,\n                  lineColor: \"#FFFFFF80\",\n                  tickColor: \"#FFFFFF80\",\n                  labels: {\n                        ...theme.chartConfig.xAxis,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  title: {\n                        ...theme.chartConfig.xAxis.title,\n                        style: {\n                              color: \"#FFFFFF\",\n                        }\n                  },\n                  categories\n            },\n            yAxis: {\n                  visible: false,\n            },\n            legend: {\n                  ...theme.chartConfig.legend,\n                  itemStyle: {\n                        fontWeight: 400,\n                        color: \"#FFFFFFE0\",\n                  },\n                  itemHoverStyle: {\n                        color: \"#FFFFFF\",\n                  },\n            },\n            series: [\n                  {\n                        name: state.country,\n                        data,\n                        marker: {\n                              enabled: false\n                        },\n                  },\n            ],\n            tooltip: {\n                  ...theme.chartConfig.tooltip,\n                  backgroundColor: theme.palette.secondary.main,\n                  pointFormat: '<span style=\"color: #FFFFFFE0>{series.name}</span>: <b>{point.y}</b>{point.change}<br/>',\n                  style: {\n                        color: \"#FFFFFF\",\n                        fontSize: \"12px\",\n                        fontWeight: \"normal\",\n                        textOutline: \"none\",\n                  },\n            }\n      }\n      return (\n            <div className={styl.root}>\n                  <Paper elevation={0} className={styl.paperContrastAreaSpline}>\n                        <HighchartsReact\n                              highcharts={Highcharts}\n                              options={chartConfig}>\n                        </HighchartsReact>\n                  </Paper>\n            </div>\n      )\n}\n\nexport const PopulationByCountry = createStore({\n      storeID: \"#Population\",\n      Component: Population,\n      state: {\n            country: \"World\"\n      },\n})","import React from 'react';\nimport {\n      Grid,\n      Typography,\n      ToggleButtonGroup,\n      ToggleButton,\n      Divider,\n      Paper,\n      Button,\n      Menu,\n      MenuItem,\n      ExpandMoreRounded,\n      PaletteRounded,\n      useTheme,\n      fade\n} from '../../Core';\nimport World from '../../../assets/CSV/worldMap.json';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\n\nexport const Country = createStore({\n      storeID: \"#Country\",\n      Component: ({ state }) => {\n            const styl = Styles();\n            const theme = useTheme();\n\n            const onClose = evt => {\n                  StoreManager.update(\"#Country\", {\n                        anchor: null\n                  })\n            }\n            const onClick = evt => {\n                  StoreManager.update(\"#Country\", {\n                        anchor: evt.currentTarget\n                  })\n            }\n            const onFilterSelect = country => {\n                  StoreManager.update(\"#Country\", {\n                        country,\n                        anchor: null\n                  });\n                  StoreManager.update(\"#Population\", {\n                        country\n                  })\n            }\n            return (\n                  <Grid item sm={6} md={3} style={{ padding: 0 }}>\n                        <Paper elevation={0} className={styl.countrySelectionContainer}>\n                              <Button className={styl.btnCountrySelection} onClick={onClick}>\n                                    {state.country}\n                                    <ExpandMoreRounded />\n                              </Button>\n                              <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={state.anchor}\n                                    keepMounted\n                                    open={Boolean(state.anchor)}\n                                    onClose={onClose}\n                                    PopoverClasses={{\n                                          paper: styl.popover_Paper\n                                    }}\n                              >\n                                    {\n                                          World.map(x => {\n                                                return (\n                                                      <MenuItem onClick={() => onFilterSelect(x.Name)} >\n                                                            {x.Name}\n                                                      </MenuItem>\n                                                )\n                                          })\n                                    }\n                              </Menu>\n                        </Paper>\n                  </Grid>\n            )\n      },\n      state: {\n            anchor: null,\n            country: \"World\"\n      }\n})","import React, { useEffect, useState, Fragment } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport ReactTooltip from \"react-tooltip\";\nimport worldMapJSON from \"../../../assets/CSV/worldMap.json\";\nimport {\n      ComposableMap,\n      Geographies,\n      Geography,\n      Sphere,\n      Graticule\n} from \"react-simple-maps\";\nimport {\n      Typography,\n      Paper,\n      useTheme,\n      fade\n} from '../../Core';\nimport { createStore, StoreManager } from \"@rootzjs/store\";\nimport { Styles } from '../../../styles/Designs/WorldMap';\n\n\nconst geoUrl =\n      \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst filterMapping = {\n      \"Population\": \"POP_EST\",\n      \"GDP\": \"GDP_MD_EST\",\n      \"GDP per Capita\": \"GDP_MD_EST\"\n}\n\nconst domianMapping = {\n      \"Population\": [0, 200000000],\n      \"GDP\": [1000, 4000000],\n      \"GDP per Capita\": [0, 0.07],\n}\n\nconst domianMappingBi = {\n      \"Population\": [1000, 100000000, 1500000000],\n      \"GDP\": [10000, 1000000, 30000000],\n      \"GDP per Capita\": [0, 0.07],\n}\n\nconst domianMappingHeat = {\n      \"Population\": [10000, 500000, 7000000, 4000000, 7000000, 10000000, 30000000, 50000000, 100000000, 500000000],\n      \"GDP\": [50, 30000, 70000, 100000, 200000, 300000, 1000000, 3000000, 10000000, 15000000],\n      \"GDP per Capita\": [0, 0.07]\n}\n\nexport const Maps = ({\n      type,\n      filterBy,\n      content,\n      topSelection\n}) => {\n      const styl = Styles();\n      const theme = useTheme();\n      const colorScaleGray = scaleLinear()\n            .domain(domianMappingBi[filterBy])\n            .range([\"#EEE\", \"#AAA\", \"#666\"]);\n      const colorScaleMono = scaleLinear()\n            .domain(domianMapping[filterBy])\n            .range([\"#ffe8e5\", theme.palette.primary.main]);\n      const colorScaleBi = scaleLinear()\n            .domain(domianMappingBi[filterBy])\n            .range([\"#ffe392\", \"#0f9318\", \"#003500\"]);\n      const colorScaleHeat = scaleLinear()\n            .domain(domianMappingHeat[filterBy])\n            .range([\"#eaef1f\", \"#f6bd26\", \"#f59a39\", \"#e57251\", \"#d0526b\", \"#bc397e\", \"#93249c\", \"#7020a4\", \"#4a1b9d\", \"#171789\"]);\n      const getFillData = (geo, d) => {\n            let fill;\n            switch (type) {\n                  case \"SIMPLE\": {\n                        fill = theme.background[20];\n                        break;\n                  }\n                  case \"MONO_CHOROPLETH\": {\n                        const data = filterBy === \"GDP per Capita\" ? (geo.properties[filterMapping[\"GDP\"]] / geo.properties[filterMapping[\"Population\"]]) : geo.properties[filterMapping[filterBy]]\n                        fill = (d ? colorScaleMono(data) : fade(theme.text[30], 0.1));\n                        break;\n                  }\n                  case \"BI_CHOROPLETH\": {\n                        const data = filterBy === \"GDP per Capita\" ? (geo.properties[filterMapping[\"GDP\"]] / geo.properties[filterMapping[\"Population\"]]) : geo.properties[filterMapping[filterBy]]\n                        fill = (d ? colorScaleBi(data) : fade(theme.text[30], 0.1));\n                        break;\n                  }\n                  case \"HEAT_CHOROPLETH\": {\n                        const data = filterBy === \"GDP per Capita\" ? (geo.properties[filterMapping[\"GDP\"]] / geo.properties[filterMapping[\"Population\"]]) : geo.properties[filterMapping[filterBy]]\n                        fill = (d ? colorScaleHeat(data) : fade(theme.text[30], 0.1));\n                        break;\n                  }\n                  default: {\n                        const data = filterBy === \"GDP per Capita\" ? (geo.properties[filterMapping[\"GDP\"]] / geo.properties[filterMapping[\"Population\"]]) : geo.properties[filterMapping[filterBy]]\n                        fill = (d ? colorScaleGray(data) : fade(theme.text[30], 0.1))\n                  }\n            }\n            return fill;\n      }\n      \n      return (\n            <div className={styl.root}>\n                  <Paper elevation={0} className={styl.paperWorldMap}>\n                        <ComposableMap\n                              data-tip=\"\"\n                              projection=\"geoMercator\"\n                              projectionConfig={{\n                                    rotate: [-10, 0, 0],\n                                    scale: 80\n                              }}\n                        >\n                              {worldMapJSON.length > 0 && (\n                                    <Geographies geography={geoUrl}>\n                                          {({ geographies }) => {\n                                                const appProfile = StoreManager.getProfile();\n                                                if (!appProfile.hasOwnProperty(\"geoData\")) {\n                                                      StoreManager.setProfile({ geoData: geographies.map(x => x.properties) });\n                                                      StoreManager.requestUpdate(\"#TopBottomFilter\");\n                                                }\n                                                return (\n                                                      geographies.map(geo => {\n                                                            const d = worldMapJSON.find(s => s.ISO3 === geo.properties.ISO_A3);\n                                                            let stylClass = styl.states;\n                                                            if (geo.properties.ISO_A3 === \"ATA\" || geo.properties.ISO_A3 === \"GRL\") return [];\n                                                            return (\n                                                                  <Geography\n                                                                        id={geo.properties.ISO_A3}\n                                                                        key={geo.rsmKey}\n                                                                        geography={geo}\n                                                                        className={stylClass}\n                                                                        onMouseEnter={() => {\n                                                                              let contentText = \"\";\n                                                                              const { NAME, POP_EST, GDP_MD_EST } = geo.properties;\n                                                                              if (filterBy === \"Population\") {\n                                                                                    contentText = `${NAME} - ${rounded(POP_EST)}`\n                                                                              } else if (filterBy === \"GDP\") {\n                                                                                    contentText = `${NAME} - ${rounded(GDP_MD_EST)}`\n                                                                              } else if (filterBy === \"GDP per Capita\") {\n                                                                                    contentText = `${NAME} - ${rounded(GDP_MD_EST / POP_EST)}`\n                                                                              }\n                                                                              StoreManager.update(\"#MapInsights\", {\n                                                                                    content: contentText\n                                                                              })\n                                                                        }}\n                                                                        onMouseLeave={() => {\n                                                                              StoreManager.update(\"#MapInsights\", {\n                                                                                    content: \"\"\n                                                                              })\n                                                                        }}\n                                                                        style={{\n                                                                              default: type === \"SIMPLE\"\n                                                                                    ?\n                                                                                    {\n                                                                                          stroke: theme.text[60],\n                                                                                    } : {\n                                                                                          stroke: \"\"\n                                                                                    },\n                                                                              hover: type === \"SIMPLE\"\n                                                                                    ?\n                                                                                    {\n                                                                                          fill: fade(theme.palette.primary.main, 0.8),\n                                                                                          stroke: theme.text[60],\n                                                                                    } : {\n                                                                                          fill: \"\"\n                                                                                    }\n                                                                        }}\n                                                                        fill={getFillData(geo, d)}\n                                                                  />\n                                                            );\n                                                      })\n                                                )\n                                          }\n                                          }\n                                    </Geographies>\n                              )}\n                        </ComposableMap>\n                        <ReactTooltip>{content}</ReactTooltip>\n                  </Paper>\n            </div>\n      )\n}\n\nconst rounded = num => {\n      if (num > 1000000000) {\n            return Math.round(num / 100000000) / 10 + \"Bn\";\n      } else if (num > 1000000) {\n            return Math.round(num / 100000) / 10 + \"M\";\n      } else {\n            return Math.round(num / 100) / 10 + \"K\";\n      }\n};\n\n\n","import React, { Fragment } from 'react';\nimport {\n      Grid,\n      Typography,\n      ToggleButtonGroup,\n      ToggleButton,\n      Paper,\n      Button,\n      Menu,\n      MenuItem,\n      Divider\n} from '../../Core';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nimport { Styles } from '../../../styles/Designs/Dashboard';\nimport { Filter } from './FilterSeletion';\nimport { Region } from './RegionSelection';\nimport { Theme } from './ThemeSelection';\nimport { TopBottomFilter } from './TopBottomFilterSelection';\nimport { PopulationByCountry } from './PopulationByCountry';\nimport { Country } from './CountrySelection';\nimport { Maps } from './WorldMap';\n\nconst DashboardComponent = ({\n      state\n}) => {\n      const styl = Styles();\n      return (\n            <Fragment>\n                  <div className={styl.root} >\n                        <Grid container className={styl.gridContainer}>\n                              <div className={styl.mapContainer}>\n                                    <div className={styl.mapFiterContainer}>\n                                          <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                                                Regional Comparison\n                                          </Typography>\n                                          <Filter />\n                                    </div>\n                                    <MapsInsights {...state} />\n                              </div>\n                        </Grid>\n                        <Grid container className={styl.topAndBottomContainer}>\n                              <TopBottomFilter {...state} />\n                        </Grid>\n                  </div>\n                  <div className={styl.root} >\n                        <Grid container className={styl.gridContainer}>\n                              <div className={styl.mapContainer}>\n                                    <div className={styl.mapFiterContainer}>\n                                          <Typography className={styl.title} variant=\"h6\" color=\"inherit\">\n                                                Regional Comparison\n                                          </Typography>\n                                          <Country />\n                                    </div>\n                                    <PopulationByCountry />\n                              </div>\n                        </Grid>\n                  </div>\n            </Fragment>\n      )\n}\n\nconst Map = ({ state, props }) => <Maps {...state} />\n\nconst MapsInsights = createStore({\n      storeID: \"#MapInsights\",\n      Component: Map,\n      state: {},\n      mapAllPropsToState: true\n})\n\nexport const Dashboard = createStore({\n      storeID: \"#Dashboard\",\n      Component: DashboardComponent,\n      state: {\n            region: \"World\",\n            type: \"MONO_CHOROPLETH\",\n            filterBy: \"Population\",\n            content: \"\",\n            topSelection: \"All\"\n      }\n})\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            width: theme.isMobile ? \"100vw\" : \"82vw\",\n            height: \"92vh\",\n            padding: \"12px 15px\",\n            boxSizing: \"border-box\",\n            marginTop: 50,\n            overflowY: \"auto\",\n      },\n}))","import React, { useEffect } from 'react';\nimport { Lines } from '../Designs/Categorial/Lines';\nimport { Area } from '../Designs/Categorial/Area';\nimport { Bars } from '../Designs/Categorial/Bars';\nimport { Pie } from '../Designs/Statistical/Pie';\nimport { Donut } from '../Designs/Statistical/Donut';\nimport { ScatterPlot } from '../Designs/Coordinate/ScatterPlot';\nimport { BubblePlot } from '../Designs/Coordinate/BubblePlot';\nimport { HeatMaps } from '../Designs/Spacial/HeatMaps';\nimport { Gauge } from '../Designs/Statistical/Gauge';\nimport { Radar } from '../Designs/Statistical/Radar';\nimport { WorldMap } from '../Designs/Spacial/WorldMap';\nimport { Dashboard } from '../Designs/Dashboard/Master';\n\nimport { Styles } from '../../styles/Playground';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nconst ComponentMap = {\n      Collabrate: Dashboard\n}\n\nconst Component = ({ props, state }) => {\n      const styl = Styles();\n      const Section = ComponentMap[state.activeSection];\n      useEffect(() => {\n            const doc = document.getElementById(\"main-container\");\n            doc.scrollTop = 0;\n      })\n      return (\n            <main>\n                  <div id=\"main-container\" className={styl.root}>\n                        <Section />\n                  </div>\n            </main>\n      )\n}\n\nexport const Playground =\n      createStore({\n            storeID: \"#PlaygroundComponent\",\n            Component: Component,\n            state: {\n                  activeSection: StoreManager.getState(\"#AppDrawerComponent\").activeSection\n            }\n      })","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            display: \"flex\",\n            backgroundColor: theme.background[10],\n            width: \"100vw\",\n            height: \"100vh\"\n      },\n      oopsSomethingWentWrongContianer: {\n\n      },\n}))","export const PRIMARY_COLOR = \"#4775FF\";\nexport const STUDIO_COLOR = \"#E91D63\";\nexport const PRIMARY_FONT_SIZE = 13;\nexport const DARK_THEME_PROPS = {\n      TYPE: \"dark\",\n      TEXT: {\n            \"00\": \"#FFFFFF\",\n            \"10\": \"#F8F9FA\",\n            \"20\": \"#EEEEEE\",\n            \"30\": \"#DDDDDD\",\n            \"40\": \"#BBBBBB\",\n            \"50\": \"#888888\",\n            \"60\": \"#666666\",\n            \"70\": \"#555555\",\n            \"80\": \"#444444\",\n            \"90\": \"#222222\"\n      },\n      BACKGROUND: {\n            \"00\": \"#292929\",\n            \"10\": \"#333333\",\n            \"20\": \"#191919\",\n            \"30\": \"#444444\",\n            \"none\": \"transparent\"\n      },\n      REVERSE: {\n            BACKGROUND: {\n                  \"00\": \"#FFFFFF\",\n                  \"10\": \"#DDDDDD\",\n                  \"20\": \"#888888\",\n                  \"30\": \"#444444\",\n                  \"none\": \"transparent\"\n            },\n      },\n      SHADOW: {\n            \"00\": \"1px 1px 5px 2px rgba(0,0,0,0.5)\",\n            \"10\": \"1px 1px 5px 2px rgba(0,0,0,0.7)\",\n            \"20\": \"1px 1px 3px 1px rgba(0,0,0,0.05)\",\n      }\n}\nexport const LIGHT_THEME_PROPS = {\n      TYPE: \"light\",\n      TEXT: {\n            \"00\": \"#000000\",\n            \"10\": \"#222222\",\n            \"20\": \"#444444\",\n            \"30\": \"#666666\",\n            \"40\": \"#888888\",\n            \"50\": \"#AAAAAA\",\n            \"60\": \"#CCCCCC\",\n            \"70\": \"#DDDDDD\",\n            \"80\": \"#EEEEEE\",\n            \"90\": \"#F8F9FA\"\n      },\n      BACKGROUND: {\n            \"00\": \"#FFFFFF\",\n            \"10\": \"#F3F2F1\",\n            \"20\": \"#EEEEEE\",\n            \"30\": \"#E2E2E2\",\n            \"none\": \"transparent\"\n      },\n      REVERSE: {\n            BACKGROUND: {\n                  \"00\": \"#0F0F1E\",\n                  \"10\": \"#444444\",\n                  \"20\": \"#888888\",\n                  \"30\": \"#DDDDDD\",\n                  \"none\": \"transparent\"\n            },\n      },\n      SHADOW: {\n            \"00\": \"1px 1px 5px 2px rgba(0,0,0,0.05)\",\n            \"10\": \"1px 1px 5px 2px rgba(0,0,0,0.2)\",\n            \"20\": \"1px 1px 3px 1px rgba(0,0,0,0.05)\",\n      }\n}","import { \n      PRIMARY_COLOR,\n      STUDIO_COLOR,\n      DARK_THEME_PROPS\n} from './Master';\n\nexport const darkThemeStyles = {\n      theme: DARK_THEME_PROPS.TYPE,\n      palette: {\n            primary: {\n                  main: PRIMARY_COLOR,\n            },\n            secondary: {\n                  main: STUDIO_COLOR\n            }\n      },\n      text: DARK_THEME_PROPS.TEXT,\n      background: DARK_THEME_PROPS.BACKGROUND,\n      reverse: {\n            background: DARK_THEME_PROPS.REVERSE.BACKGROUND\n      },\n      shadow: DARK_THEME_PROPS.SHADOW\n}","import {\n      PRIMARY_COLOR,\n      STUDIO_COLOR,\n      LIGHT_THEME_PROPS,\n} from './Master';\n\nexport const lightThemeStyles = {\n      theme: LIGHT_THEME_PROPS.TYPE,\n      palette: {\n            primary: {\n                  main: PRIMARY_COLOR\n            },\n            secondary: {\n                  main: STUDIO_COLOR\n            }\n      },\n      text: LIGHT_THEME_PROPS.TEXT,\n      background: LIGHT_THEME_PROPS.BACKGROUND,\n      reverse: {\n            background: LIGHT_THEME_PROPS.REVERSE.BACKGROUND,\n      },\n      shadow: LIGHT_THEME_PROPS.SHADOW\n}","import {\n      PRIMARY_FONT_SIZE,\n      PRIMARY_COLOR\n} from './Master';\n\nexport const BUTTONS_PROPS = {\n      PRIMARY: {\n            fontSize: PRIMARY_FONT_SIZE,\n            padding: \"5px 15px\",\n            color: \"#FFFFFF\"\n      },\n      SECONDARY: {\n            fontSize: PRIMARY_FONT_SIZE,\n            color: PRIMARY_COLOR,\n            padding: \"5px 15px\",\n            backgroundColor: \"#EEEEEE\"\n      }\n}","import { darkThemeStyles } from './Dark';\nimport { lightThemeStyles } from './Light';\nimport { PRIMARY_FONT_SIZE } from './Master';\nimport { BUTTONS_PROPS } from './Buttons';\n\nconst themeCollections = {\n      light: lightThemeStyles,\n      dark: darkThemeStyles\n}\n\nexport const commonThemeStyles = selectedTheme => ({\n      divider: {\n            backgroundColor: themeCollections[selectedTheme].text[80],\n            margin: \"1px 12px 1px\"\n      },\n      verticalDivider: {\n            backgroundColor: themeCollections[selectedTheme].text[80],\n      },\n      animation: {\n            bounce: \"bounce 400ms linear both\",\n            bounceFast: \"bounce 150ms ease-out both\",\n            swayRTL: \"swayLeftToRight 1000ms linear both\",\n            swayLTR: \"swayRightToLeft 1000ms linear both\",\n            eyeBlink: \"eyeBlink 4800ms linear infinite both\",\n            appearBTT: \"appearBTT 0.7s ease-in both;\",\n      },\n      ellipsis: {\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n      },\n      checkbox: {\n            \"& .MuiButtonBase-root\": {\n                  color: themeCollections[selectedTheme].text[50]\n            },\n            \"& .Mui-checked\": {\n                  color: themeCollections[selectedTheme].palette.primary.main\n            }\n      },\n      typography: {\n            fontFamily: [\n                  'Roboto',\n                  '\"Helvetica Neue\"',\n                  'Arial',\n                  'sans-serif',\n                  '\"Apple Color Emoji\"',\n                  '\"Segoe UI Emoji\"',\n                  '\"Segoe UI Symbol\"'\n            ],\n            body1: {\n                  fontSize: PRIMARY_FONT_SIZE,\n                  fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n            },\n            h6: {\n                  fontSize: 15,\n                  fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n            }\n      },\n      btn: {\n            primary: BUTTONS_PROPS.PRIMARY,\n            secondary: BUTTONS_PROPS.SECONDARY\n      },\n      icons: {\n            size: {\n                  primary: {\n                        fontSize: 18\n                  }\n            }\n      },\n      isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n});","import { darkThemeStyles } from './Dark';\nimport { lightThemeStyles } from './Light';\nimport { STUDIO_COLOR } from './Master'\n\nconst themeCollections = {\n      light: lightThemeStyles,\n      dark: darkThemeStyles\n}\n\nexport const chartThemeStyles = selectedTheme => ({\n      chartConfig: {\n            chart: {\n                  type: \"line\",\n                  height: \"280px\",\n                  style: {\n                        fontFamily: 'Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n                  },\n            },\n            colors: [STUDIO_COLOR, \"#00bcd4\", \"#ff5722\", \"#8bc34a\", \"#2196f3\", \"#4caf50\", \"#03a9f4\", \"#009688\", \"#00bcd4\"],\n            title: {\n                  text: \"\"\n            },\n            xAxis: {\n                  gridLineWidth: 0,\n                  gridLineColor: themeCollections[selectedTheme].text[70],\n                  tickColor: themeCollections[selectedTheme].text[50],\n                  labels: {\n                        style: {\n                              color: themeCollections[selectedTheme].text[50],\n                        }\n                  },\n                  title: {\n                        style: {\n                              color: themeCollections[selectedTheme].text[30],\n                              fontWeight: 'bold',\n                              fontSize: '12px',\n\n                        }\n                  }\n            },\n            yAxis: {\n                  gridLineColor: themeCollections[selectedTheme].text[70],\n                  tickColor: themeCollections[selectedTheme].text[50],\n                  labels: {\n                        style: {\n                              color: themeCollections[selectedTheme].text[50],\n                        }\n                  },\n                  title: {\n                        style: {\n                              color: themeCollections[selectedTheme].text[30],\n                              fontWeight: 'bold',\n                              fontSize: '12px',\n                        }\n                  }\n            },\n            credits: {\n                  enabled: false\n            },\n            legend: {\n                  layout: 'horizontal',\n                  align: 'right',\n                  verticalAlign: 'top',\n                  symbolHeight: 10,\n                  symbolWidth: 10,\n                  symbolRadius: 12,\n                  itemStyle: {\n                        fontWeight: 400,\n                        color: themeCollections[selectedTheme].text[30],\n                  },\n                  itemHoverStyle: {\n                        color: themeCollections[selectedTheme].text[20],\n                  },\n            },\n            plotOptions: {\n                  series: {\n                        marker: {\n                              symbol: \"circle\",\n                              lineWidth: 3,\n                              radius: 5,\n                        },\n                        animation: {\n                              duration: 2000\n                        },\n                  },\n                  line: {\n                        lineWidth: 1,\n                  },\n                  column: {\n                        borderColor: \"#FFFFFF60\"\n                  },\n                  lollipop: {\n                        connectorWidth: 10,\n                        marker: {\n                              lineColor: \"#FFFFFFA0\"\n                        }\n                  },\n                  dumbbell: {\n                        connectorWidth: 7,\n                        marker: {\n                              lineColor: \"#FFFFFFA0\"\n                        }\n                  },\n                  bar: {\n                        borderColor: \"#FFFFFF60\"\n                  },\n                  scatter: {\n                        marker: {\n                              symbol: \"circle\",\n                              radius: 5,\n                              lineWidth: 0,\n                              lineColor: \"#FFFFFFA0\",\n                              states: {\n                                    hover: {\n                                          enabled: true,\n                                          lineColor: themeCollections[selectedTheme].text[20]\n                                    }\n                              }\n                        },\n                        states: {\n                              hover: {\n                                    marker: {\n                                          enabled: false\n                                    }\n                              }\n                        },\n                        tooltip: {\n                              pointFormat: '<span>{series.name}</span>: <b>{point.x}, {point.y}</b>{point.change}<br/>',\n                        }\n                  },\n                  pie: {\n                        allowPointSelect: true,\n                        cursor: 'pointer',\n                        dataLabels: {\n                              enabled: false\n                        },\n                        showInLegend: true,\n                        borderColor: \"#FFFFFF60\"\n                  },\n                  variablepie: {\n                        allowPointSelect: true,\n                        cursor: 'pointer',\n                        dataLabels: {\n                              enabled: false\n                        },\n                        showInLegend: true,\n                        borderColor: \"#FFFFFF60\"\n                  },\n                  solidgauge: {\n                        dataLabels: {\n                              enabled: false\n                        },\n                        linecap: 'round',\n                        stickyTracking: false,\n                        rounded: true\n                  }\n            },\n            tooltip: {\n                  backgroundColor: STUDIO_COLOR,\n                  borderRadius: 10,\n                  shadow: false,\n                  useHTML: false,\n                  crosshairs: true,\n                  shared: true,\n                  borderColor: \"none\",\n                  style: {\n                        padding: 0,\n                        stroke: \"none\",\n                        fontSize: \"11px\",\n                        color: \"#FFFFFF\"\n                  },\n                  pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b style=\"color:{series.color}\">{point.y}</b>{point.change}<br/>',\n                  valueDecimals: 2,\n                  split: true,\n                  hideDelay: 1000\n            }\n      },\n});","import React from 'react'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { darkThemeStyles } from './Dark';\nimport { lightThemeStyles } from './Light';\nimport { commonThemeStyles } from './Common';\nimport { chartThemeStyles } from './Charts';\nconst appTheme = (theme, forComponent) => {\n      if (theme === \"light\") {\n            return createMuiTheme({\n                  ...lightThemeStyles,\n                  ...commonThemeStyles(theme),\n                  ...chartThemeStyles(theme)\n            });\n      } else if (theme === \"dark\") {\n            return createMuiTheme({\n                  ...darkThemeStyles,\n                  ...commonThemeStyles(theme),\n                  ...chartThemeStyles(theme)\n            });\n      }\n      else {\n            return createMuiTheme({\n                  ...lightThemeStyles,\n                  ...commonThemeStyles(theme),\n                  ...chartThemeStyles(theme)\n            });\n      }\n}\n\nexport const AppTheme = ({ children, theme, forComponent }) => <ThemeProvider theme={appTheme(theme, forComponent)}>{children}</ThemeProvider>","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const Styles = makeStyles(theme => ({\n      root: {\n            width: \"100vw\",\n            height: \"100vh\"\n      },\n      oopsSomethingWentWrongContianer: {\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            display: \"flex\",\n            marginTop: 50,\n            backgroundColor: \"inherit\"\n      },\n      logo: {\n            height: \"65vh\",\n            marginLeft: 40\n      },\n      errorTextTitleContainer: {\n            width: \"100vw\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"row\",\n            flexWrap: \"wrap\",\n            textAlign: \"center\",\n            marginBottom: 30,\n      },\n      title: {\n            fontWeight: \"bold\",\n            fontSize: 25,\n            color: theme.text[10],\n            flex: \"0 1 100%\",\n            marginBottom: 20\n      },\n      content: {\n            flex: \"0 1 50%\",\n            color: theme.text[30],\n            fontSize: 16\n      },\n      btnContainer: {\n            textAlign: \"center\",\n            padding: 10,\n      },\n      btnReload: {\n            ...theme.btn.primary,\n            color: theme.text[90],\n            fontSize: 14,\n            padding: \"7px 27px\",\n            margin: 7,\n      },\n      btnDetails: {\n            // ...theme.btn.primaryNoHover,,\n            fontSize: 14,\n            padding: \"7px 27px\",\n            margin: 7,\n      }\n}))","import React from 'react';\nimport { Styles } from '../../styles/ErrorPage';\nimport {\n      Paper,\n      useTheme,\n      Button\n} from '../Core';\nimport somethingWentWrongLightSVG from '../../assets/images/somethingWentWrongLight.svg';\nimport somethingWentWrongDarkSVG from '../../assets/images/somethingWentWrongDark.svg';\n\nconst errorText = {\n      oopsTitle: \"Sorry, something went wrong\",\n      oopsContent: \"Try reloading the page. We're working hard to fix Prism for you as soon as possible\"\n}\n\nexport const OopsSomethingWentWrong = ({ onReload, details }) => {debugger;\n      const styl = Styles();\n      const theme = useTheme();\n      const isLight = theme.theme === \"light\";\n      const onGetDetails = () => { \n            console.log(details);\n      }\n      return (\n            <div className={styl.root}>\n                  <Paper elevation=\"0\" className={styl.oopsSomethingWentWrongContianer}>\n                        <img className={styl.logo} src={isLight ? somethingWentWrongLightSVG : somethingWentWrongDarkSVG} alt=\"logo\" />\n                  </Paper>\n                  <div className={styl.errorTextTitleContainer}>\n                        <div className={styl.title}>{errorText.oopsTitle}</div>\n                        <div className={styl.content}>{errorText.oopsContent}</div>\n                  </div>\n                  <div className={styl.btnContainer}>\n                        <Button\n                              color=\"primary\"\n                              variant=\"contained\"\n                              className={styl.btnReload}\n                              onClick={onReload}\n                        >Reload</Button>\n                        <Button\n                              color=\"primary\"\n                              className={styl.btnDetails}\n                              onClick={onGetDetails}\n                        >Details</Button>\n                  </div>\n            </div>\n      )\n}","import React, { useEffect, useReducer, useState, Fragment } from 'react';\nimport { AppHeader } from \"./AppHeader\";\nimport { AppDrawer } from \"./AppDrawer\";\nimport { Playground } from './Playground';\nimport { Styles } from \"../styles/Master\";\nimport { AppTheme } from '../theme/App';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { OopsSomethingWentWrong, windowErrorHandler } from './ErrorPage';\nimport { Route, Link, BrowserRouter as Router, withRouter } from 'react-router-dom';\nimport { createStore, StoreManager } from '@rootzjs/store';\n\nconst defaultTheme = \"light\";\n\nconst Component = ({ state, props }) => {\n      const {\n            theme,\n      } = state;\n      const onErrorOccured = (err, stack) => {\n            StoreManager.update({\n                  didSomethingWentWrong: true,\n                  errorDetails: err\n            });\n      }\n      const onReloadPage = () => {\n            StoreManager.update({\n                  didSomethingWentWrong: false\n            });\n      }\n      useEffect(() => {\n            windowErrorHandler(onErrorOccured);\n      }, []);\n\n      return (\n            <AppTheme theme={theme} forComponent=\"APP\">\n                  <Designs\n                        onReloadPage={onReloadPage}\n                        {...state}\n                  />\n            </AppTheme>\n      )\n}\n\nconst Designs = props => {\n      const styl = Styles();\n      return (\n            <div className={styl.root} >\n                  <CssBaseline />\n                  <AppHeader {...props} />\n                  {\n                        !props.didSomethingWentWrong ?\n                              <Fragment>\n                                    <AppDrawer {...props} />\n                                    <Playground {...props} />\n                              </Fragment>\n                              :\n                              <OopsSomethingWentWrong onReload={props.onReloadPage} details={props.errorDetails} />\n                  }\n            </div>\n      )\n}\n\n\nexport const Master =\n      createStore({\n            storeID: \"#MasterComponent\",\n            Component: Component,\n            state: {\n                  theme: defaultTheme,\n                  didSomethingWentWrong: false,\n                  errorDetails: \"\",\n                  route: {\n                        title: \"Insights\"\n                  },\n            }\n      })","export const windowErrorHandler = (callback, ...args) => {\n      window.onerror = (message, file, line, column, errorObject) => {\n            column = column || (window.event && window.event.errorCharacter);\n            var stack = errorObject ? errorObject.stack : null;\n\n            //trying to get stack from IE\n            if (!stack) {\n                  var stack = [];\n                  var f = args.callee.caller;\n                  while (f) {\n                        stack.push(f.name);\n                        f = f.caller;\n                  }\n                  errorObject['stack'] = stack;\n            }\n\n            var data = {\n                  message: message,\n                  file: file,\n                  line: line,\n                  column: column,\n                  errorStack: stack,\n            };\n            callback(data);\n      }\n}","// import Data\n\nexport const ENDPOINT_MAPPINGS = {\n      getData: \"/getData\",\n}\n\nexport const ENDPOINT_MOCK_DATA_MAPPINGS = {\n      getData: {}\n}\n\nexport const ENDPOINT_PAYLOAD_MAPPINGS = {\n      getData: {\n            \"id\": \"123\"\n      }\n}\n","import Axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport {\n      ENDPOINT_MAPPINGS,\n      ENDPOINT_MOCK_DATA_MAPPINGS\n} from './Mappings';\n\nexport const initiateMockAdapter = () => {\n      const adapter = new MockAdapter(Axios);\n\n      // get Network and Genre Data\n      adapter\n            .onGet(ENDPOINT_MAPPINGS.getData)\n            .reply(\n                  200,\n                  ENDPOINT_MOCK_DATA_MAPPINGS.getData\n            )\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AnalytixaApp } from './App';\n\nReactDOM.render(<AnalytixaApp />, document.getElementById('analytixa-root'));","import React from 'react';\nimport { Master } from \"./components/Master\";\nimport { initiateMockAdapter } from './service/MockAdapter';\n\nimport './assets/stylesheets/animate.css';\n\ninitiateMockAdapter();\n\nexport const AnalytixaApp = () => <Master />\n","module.exports = __webpack_public_path__ + \"static/media/logo.8b6a1d7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo1.59d8bb2b.svg\";"],"sourceRoot":""}